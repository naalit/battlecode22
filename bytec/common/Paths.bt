extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

let target: MapLocation;
let lastRetarget: MapLocation;

// Greedy pathfinding - go in the lowest rubble direction that's strictly closer to the target
fn pathfindGreedy(): Direction throws GameActionException {
    let loc = rc.getLocation();

    let dir = loc.dirTo(target);

    // Try going around obstacles, first left, then right
    let options: [MapLocation] = [ loc.add(dir), loc.add(dir.rotateLeft()), loc.add(dir.rotateRight()),
        loc.add(dir.rotateLeft().rotateLeft()), loc.add(dir.rotateRight().rotateRight()) ];
    let best: MapLocation = null;
    let best_pass = 100;
    let prev_dist2 = loc.distanceSquaredTo(target);
    for i in options {
        if i == target && rc.canMove(loc.dirTo(i)) {
            best = i;
            best_pass = -1;
        } else if i.isWithinDistanceSquared(target, prev_dist2 - 1) && rc.canMove(loc.dirTo(i)) {
            let pass = rc.senseRubble(i);
            if pass < best_pass {
                best = i;
                best_pass = pass;
            }
        }
    }
    if best != null {
        loc.dirTo(best)
    } else {
        let n: Direction = null;
        n
    }
}

let retarget_acc = 0;

fn retarget() {
    if retarget_acc == 0 {
        retarget_acc = rc.getID();
    }

    let width = rc.getMapWidth();
    let height = rc.getMapHeight();

    let wxh = width * height;
    // This is a RNG technique I found online called Linear Congruential Generator
    // This should be a random 12 bits
    retarget_acc = (1231 * retarget_acc + 3171) % wxh;
    // Split into two, each in 0..N
    let x = retarget_acc % width;
    let y = retarget_acc / width;

    target = MapLocation(x, y);
    lastRetarget = target;
}

// BFS / modified Bellman-Ford pathfinding algorithm
// This takes 3000-4000 bytecode for the whole thing (probably)

// Vision radius is 20 u^2
// That's a 9x9 square, minus the corners, but we initialize the whole thing for easy coordinate calculation
// (cost in cooldown (assuming movement cooldown = 10) to get here, direction to get here from the origin)
let cache: [(i32, Direction); 81];
let occupied: [bool];

// Initialize the arrays
fn pathStart() throws GameActionException {
    at = rc.getLocation();

    // Reset the scores and best directions for each location
    for i in unroll 0..cache.len() {
        cache[i] = (100000, null);
    }

    // Store the positions of nearby robots in a lookup table so we can avoid them
    occupied = [; 81];
    for r in Mem::nearbyAllies {
        let x = r.location.x - at.x;
        let y = r.location.y - at.y;
        if x*x + y*y <= 20 {
            let i = (4 + x) * 9 + 4 + y;
            occupied[i] = true;
        }
    }
    for r in Mem::nearbyEnemies {
        let x = r.location.x - at.x;
        let y = r.location.y - at.y;
        if x*x + y*y <= 20 {
            let i = (4 + x) * 9 + 4 + y;
            occupied[i] = true;
        }
    }
    // Also block the last couple locations we've been at to avoid oscillation
    for l in lastLocs {
        if l != null {
            let x = l.x - at.x;
            let y = l.y - at.y;
            if x*x + y*y <= 20 {
                let i = (4 + x) * 9 + 4 + y;
                occupied[i] = true;
            }
        }
    }

    // Initialize locations adjacent to the starting point
    let rubble0 = rc.senseRubble(at);

    let directions = [
        Direction::SOUTHWEST,
        Direction::WEST,
        Direction::NORTHWEST,
        Direction::SOUTH,
        Direction::CENTER,
        Direction::NORTH,
        Direction::SOUTHEAST,
        Direction::EAST,
        Direction::NORTHEAST,
    ];
    for x in unroll -1..2 {
        for y in unroll -1..2 {
            if x*x + y*y != 0 {
                let didx = (x+1)*3 + y + 1;
                let dir = directions[didx];
                let i = (4 + x) * 9 + 4 + y;
                if rc.canMove(dir) && !occupied[i] {
                    let loc = at.translate(x, y);
                    let baseRubble = rc.senseRubble(loc) + 10;
                    cache[i] = (baseRubble + rubble0, dir);
                }
            }
        }
    }
}

let at: MapLocation;

fn inline doLoc(x: i32, y: i32) throws GameActionException {
    let loc = at.translate(x, y);
    let baseIdx = (4 + x) * 9 + 4 + y;
    if rc.onTheMap(loc) && !occupied[baseIdx] {
        let baseRubble = rc.senseRubble(loc) + 10;
        if lowPass || baseRubble < 50 {
            let maxD = if x*x > y*y { x*x } else { y*y };

            for dx in unroll -1..2 {
                for dy in unroll -1..2 {
                    let x2 = x + dx;
                    let y2 = y + dy;
                    // Only consider locations that are in previous layers (their max coordinate is less than this one)
                    // this whole condition is evaluated at compile time of course
                    if x2*x2+y2*y2 <= 20 && (dx != 0 || dy != 0) && (x2*x2 < maxD && y2*y2 < maxD) {
                        let i = (4 + x2) * 9 + 4 + y2;
                        if cache[i].0 + baseRubble < cache[baseIdx].0 {
                            cache[baseIdx] = (cache[i].0 + baseRubble, cache[i].1);
                        }
                    }
                }
            }
        }
    }
}

// Propagate scores and directions outward
// This could be run multiple times to be more accurate
// (this performs one iteration of Bellman-Ford, but in such an order than one iteration is pretty good)
fn pathIter() throws GameActionException  {
    // Visit each location in order of distance from the origin (mostly)
    let sides = [1, 3, 5, 7, 5];
    let offsets = [0, 0, 0, 0, 2];
    for layer in unroll 0..sides.len() {
        for i in unroll 0..sides[layer] {
            let o = offsets[layer];
            if i != 0 && i+1 != sides[layer] {
                doLoc(-layer, -layer + o + i);
                doLoc(layer, -layer + o + i);
            }
            doLoc(-layer + o + i, layer);
            doLoc(-layer + o + i, -layer);
        }
    }
}

fn pathFinish(from: MapLocation, to: MapLocation): Direction {
    let tx = to.x - from.x;
    let ty = to.y - from.y;
    if tx*tx + ty*ty <= 20 {
        // Go directly to target
        let d = cache[inline (4 + tx) * 9 + 4 + ty].1;
        if d != null {
            return d;
        }
    }

    // We could pick the closest point to the target
    // but we basically never want to pick a specific point *unless* it's the target
    // e.g. if we have an obstacle right in the way we want to go around, but that way we would run into it
    // so we use score + max coordinate distance to target
    // These are the positions on the outside of the vision radius to search
    let positions = [
        (-2, 4), (-1, 4), (0, 4), (1, 4), (2, 4),
        (-2, -4), (-1, -4), (0, -4), (1, -4), (2, -4),
        (-3, 3), (3, 3), (-3, -3), (3, -3),
        (-4, -2), (-4, -1), (-4, 0), (-4, 1), (-4, 2),
        (4, -2), (4, -1), (4, 0), (4, 1), (4, 2),
    ];
    let dStart = tx*tx + ty*ty;
    let bestScore = 100000;
    let bestDir: Direction = null;
    let bestPos: MapLocation = null;
    for pos in positions {
        let x = pos.0;
        let y = pos.1;
        let i = (4 + x) * 9 + 4 + y;
        let dx = x - tx;
        let dy = x - tx;
        let d2 = dx*dx + dy*dy;
        let score = cache[i].0 + 50 * max(abs(x - tx), abs(y - ty));
        if score < bestScore {
            bestScore = score;
            bestDir = cache[i].1;
            bestPos = from.translate(x, y);
        }
    }
    if bestPos != null {
        rc.setIndicatorLine(from, bestPos, 255, 0, 0);
        rc.setIndicatorLine(from, from.add(bestDir), 0, 0, 255);
    }
    bestDir
}

let lastTarget: MapLocation = null;
let lowPass = false;

define N_SAVED_LOCS = 3;
let lastLocs: [MapLocation] = [; N_SAVED_LOCS];
let lastLocIdx = 0;
fn inline addLoc(loc: MapLocation) {
    lastLocs[lastLocIdx] = loc;
    lastLocIdx = (lastLocIdx + 1) % N_SAVED_LOCS;
}
fn inline clearLocs() {
    for i in 0..N_SAVED_LOCS {
        lastLocs[i] = null;
    }
    lastLocIdx = 0;
}

fn targetMove(exploring: bool, allowLowPass: bool): bool throws GameActionException {
    let loc = rc.getLocation();
    lowPass = allowLowPass;

    if (target == null || target == loc || (exploring && rc.canSenseLocation(target)) || (exploring && rc.canSenseLocation(target) && !rc.onTheMap(target))) {
        if exploring {
            retarget();
        } else {
            return false;
        }
    }

    if target != lastTarget {
        clearLocs();
    }

    rc.setIndicatorLine(loc, target, 0, 255, 0);

    let dir = if bytecodeLeft() >= 4000 {
        let btc = bytecodeNum();
        let tStart = rc.getRoundNum();
        pathStart();
        let startBtc = bytecodeNum();
        if rc.getRoundNum() != tStart { startBtc += rc.getType().bytecodeLimit; }
        pathIter();
        let iterBtc = bytecodeNum();
        if rc.getRoundNum() != tStart { iterBtc += rc.getType().bytecodeLimit; }
        let dir = pathFinish(loc, target);
        let finishBtc = bytecodeNum();
        if rc.getRoundNum() != tStart { finishBtc += rc.getType().bytecodeLimit; }
        rc.setIndicatorString("PATHFINDING TOTAL BTC: " + (finishBtc - btc)
            + ", start: " + (startBtc - btc)
            + ", iter: " + (iterBtc - startBtc)
            + ", finish: " + (finishBtc - iterBtc));

        dir
    } else {
        rc.setIndicatorString("GREEDY PATHFINDING ENABLED");
        pathfindGreedy()
    };

    if dir != null {
        if rc.canMove(dir) {
            lastTarget = target;
            addLoc(loc);
            rc.move(dir);
            return true;
        } else {
            println("Went over and moved illegally; would throw exception! Dir = " + dir);
        }
    }
    false
}