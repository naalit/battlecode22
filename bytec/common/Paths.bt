extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

let target: MapLocation;
let lastRetarget: MapLocation;

// Greedy pathfinding - go in the lowest rubble direction that's strictly closer to the target
fn pathfindGreedy(): Direction throws GameActionException {
    let loc = rc.getLocation();

    let dir = loc.dirTo(target);

    // Try going around obstacles, first left, then right
    let options: [MapLocation] = [ loc.add(dir), loc.add(dir.rotateLeft()), loc.add(dir.rotateRight()),
        loc.add(dir.rotateLeft().rotateLeft()), loc.add(dir.rotateRight().rotateRight()) ];
    let best: MapLocation = null;
    let best_pass = 100;
    let prev_dist2 = loc.distanceSquaredTo(target);
    for i in options {
        let found = false;
        for l in lastLocs {
            if l != null && i == l {
                found = true;
                break;
            }
        }
        if found {
            continue;
        }
        if i == target && rc.canMove(loc.dirTo(i)) {
            best = i;
            best_pass = -1;
        } else if i.isWithinDistanceSquared(target, prev_dist2 - 1) && rc.canMove(loc.dirTo(i)) {
            let pass = rc.senseRubble(i);
            if pass < best_pass {
                best = i;
                best_pass = pass;
            }
        }
    }
    if best != null {
        loc.dirTo(best)
    } else {
        let n: Direction = null;
        n
    }
}

let retarget_acc = 0;

fn retarget() {
    if retarget_acc == 0 {
        retarget_acc = rc.getID();
    }

    let width = rc.getMapWidth();
    let height = rc.getMapHeight();

    let wxh = width * height;
    // This is a RNG technique I found online called Linear Congruential Generator
    // This should be a random 12 bits
    retarget_acc = (1231 * retarget_acc + 3171) % wxh;
    // Split into two, each in 0..N
    let x = retarget_acc % width;
    let y = retarget_acc / width;

    target = MapLocation(x, y);
    lastRetarget = target;
}

// BFS / modified Bellman-Ford pathfinding algorithm
// This takes 3000-4000 bytecode for the whole thing (probably)

// Vision radius is 20 u^2
// That's a 9x9 square, minus the corners, but we initialize the whole thing for easy coordinate calculation
// (cost in cooldown (assuming movement cooldown = 10) to get here << 3) | direction to get here from the origin
let cache: [i32; 121];
let occupied: [bool];
let ORDERED_DIRECTIONS = [
    Direction::SOUTHWEST,
    Direction::WEST,
    Direction::NORTHWEST,
    Direction::SOUTH,
    Direction::NORTH,
    Direction::SOUTHEAST,
    Direction::EAST,
    Direction::NORTHEAST,
];

// Initialize the arrays
fn pathStart() throws GameActionException {
    at = rc.getLocation();

    // Reset the scores and best directions for each location
    for i in unroll 0..cache.len() {
        cache[i] = 100000 << 3;//, null);
    }

    // Store the positions of nearby robots in a lookup table so we can avoid them
    occupied = [; 121];
    for r in rc.senseNearbyRobots() {
        let x = r.location.x - at.x;
        let y = r.location.y - at.y;
        if x*x + y*y <= 34 {
            let i = (5 + x) * 11 + 5 + y;
            occupied[i] = true;
        }
    }
    // for r in Mem::nearbyEnemies {
    //     let x = r.location.x - at.x;
    //     let y = r.location.y - at.y;
    //     if x*x + y*y <= 20 {
    //         let i = (5 + x) * 11 + 5 + y;
    //         occupied[i] = true;
    //     }
    // }
    // Also block the last couple locations we've been at to avoid oscillation
    // for l in lastLocs {
    //     if l != null {
    //         let x = l.x - at.x;
    //         let y = l.y - at.y;
    //         if x*x + y*y <= 34 {
    //             let i = (5 + x) * 11 + 5 + y;
    //             occupied[i] = true;
    //         }
    //     }
    // }

    // Initialize locations adjacent to the starting point
    let q = [0, 1, 2, 3, 0, 4, 5, 6, 7];
    for x in unroll -1..2 {
        for y in unroll -1..2 {
            if x*x + y*y != 0 {
                let didx = (x+1)*3 + y + 1;
                let didx = q[didx];
                let dir = ORDERED_DIRECTIONS[didx];
                let i = (5 + x) * 11 + 5 + y;
                if rc.canMove(dir) && !occupied[i] {
                    let loc = at.translate(x, y);
                    let baseRubble = rc.senseRubble(loc) + 10;
                    cache[i] = (baseRubble << 3) | didx;
                    // cache[i] = (baseRubble, dir);
                }
            }
        }
    }
}

let at: MapLocation;

let rubble: [i32; 121];
fn inline doLoc(x: i32, y: i32, r2: i32) throws GameActionException {
    let loc = at.translate(x, y);
    let baseIdx = (5 + x) * 11 + 5 + y;
    if rc.onTheMap(loc) && !occupied[baseIdx] {
        let baseRubble = (rc.senseRubble(loc) + 10) << 3;
        // rubble[baseIdx] = baseRubble;
        let maxD = if x*x > y*y { x*x } else { y*y };

        for dx in unroll -1..2 {
            for dy in unroll -1..2 {
                let x2 = x + dx;
                let y2 = y + dy;
                // Only consider locations that are in previous layers (their max coordinate is less than this one)
                // this whole condition is evaluated at compile time of course
                if x2*x2+y2*y2 <= r2 && (dx != 0 || dy != 0) && (x2*x2 <= maxD && y2*y2 <= maxD) {
                    let i = (5 + x2) * 11 + 5 + y2;
                    cache[baseIdx] = min(cache[baseIdx], cache[i] + baseRubble)
                    // if cache[i] + baseRubble < cache[baseIdx] {
                    //     cache[baseIdx] = cache[i] + baseRubble;
                    //     rc.setIndicatorLine(loc, at.translate(x2, y2), 0, 0, 127);
                    // }
                }
            }
        }
    }
}

// Propagate scores and directions outward
// This could be run multiple times to be more accurate
// (this performs one iteration of Bellman-Ford, but in such an order than one iteration is pretty good)
fn pathIter() throws GameActionException  {
    // Visit each location in order of distance from the origin (mostly)
    if rc.getType().visionRadiusSquared == 34 {
        let sides = [1, 3, 5, 7, 9, 7];
        let offsets = [0, 0, 0, 0, 0, 2];
        for layer in unroll 0..sides.len() {
            for i in unroll 0..sides[layer] {
                let o = offsets[layer];
                if layer == sides.len() - 1 || (i != 0 && i+1 != sides[layer]) {
                    doLoc(-layer, -layer + o + i, 34);
                    doLoc(layer, -layer + o + i, 34);
                }
                doLoc(-layer + o + i, layer, 34);
                doLoc(-layer + o + i, -layer, 34);
            }
        }
    } else {
        let sides = [1, 3, 5, 7, 5];
        let offsets = [0, 0, 0, 0, 2];
        for layer in unroll 0..sides.len() {
            for i in unroll 0..sides[layer] {
                let o = offsets[layer];
                if layer == sides.len() - 1 || (i != 0 && i+1 != sides[layer]) {
                    doLoc(-layer, -layer + o + i, 20);
                    doLoc(layer, -layer + o + i, 20);
                }
                doLoc(-layer + o + i, layer, 20);
                doLoc(-layer + o + i, -layer, 20);
            }
        }
    }
}

let bestArchonDir: Direction;
// rubble + 10 b/c it's already calculated
let bestArchonRubble: i32;
let bestArchonScore: i32;
fn inline doLocA(x: i32, y: i32) throws GameActionException {
    let loc = at.translate(x, y);
    let baseIdx = (5 + x) * 11 + 5 + y;
    if rc.onTheMap(loc) && !occupied[baseIdx] {
        let baseRubble = (rc.senseRubble(loc) + 10) << 3;
        let maxD = if x*x > y*y { x*x } else { y*y };

        for dx in unroll -1..2 {
            for dy in unroll -1..2 {
                let x2 = x + dx;
                let y2 = y + dy;
                // Only consider locations that are in previous layers (their max coordinate is less than this one)
                // this whole condition is evaluated at compile time of course
                if x2*x2+y2*y2 <= 34 && (dx != 0 || dy != 0) && (x2*x2 < maxD && y2*y2 < maxD) {
                    let i = (5 + x2) * 11 + 5 + y2;
                    cache[baseIdx] = min(cache[baseIdx], cache[i] + baseRubble);
                    // if cache[i].0 + baseRubble < cache[baseIdx].0 {
                    //     rc.setIndicatorLine(at.translate(x2, y2), loc, 0, 0, 127);
                    //     cache[baseIdx] = (cache[i].0 + baseRubble, cache[i].1);
                    // }
                }
            }
        }
        if cache[baseIdx] < (100000 << 3) && (baseRubble < bestArchonRubble || (baseRubble == bestArchonRubble && cache[baseIdx] < bestArchonScore)) {
            rc.setIndicatorDot(loc, 255, 0, 0);
            bestArchonDir = ORDERED_DIRECTIONS[inline cache[baseIdx] & 0b111];
            bestArchonScore = cache[baseIdx];
            bestArchonRubble = baseRubble;
        }
    }
}

fn pathIterArchon() throws GameActionException  {
    // Visit each location in order of distance from the origin (mostly)
    let sides = [1, 3, 5, 7, 5];
    let offsets = [0, 0, 0, 0, 2];
    for layer in unroll 0..sides.len() {
        for i in unroll 0..sides[layer] {
            let o = offsets[layer];
            if i != 0 && i+1 != sides[layer] {
                doLocA(-layer, -layer + o + i);
                doLocA(layer, -layer + o + i);
            }
            doLocA(-layer + o + i, layer);
            doLocA(-layer + o + i, -layer);
        }
    }
}

// Returns whether to stop
fn archonMove(): bool throws GameActionException {
    if rc.isMovementReady() {
        pathStart();
        bestArchonDir = Direction::CENTER;
        bestArchonScore = 0;
        bestArchonRubble = rc.senseRubble(rc.getLocation()) + 10;
        pathIterArchon();
        rc.setIndicatorString("ARCHON MOVE: " + bestArchonDir + " with rubble " + (bestArchonRubble - 10));
        if bestArchonDir == Direction::CENTER {
            true
        } else {
            rc.move(bestArchonDir);
            false
        }
    } else {
        false
    }
}

let bestScore = 100000;
let bestDir: Direction = null;
let bestPos: MapLocation = null;
let tx = 0;
let ty = 0;
fn inline fLoc(x: i32, y: i32) {
    let i = (5 + x) * 11 + 5 + y;
    let score = (cache[i] >> 3) + 50 * (abs(x - tx) + abs(y - ty));
    if score < bestScore {
        bestScore = score;
        bestDir = ORDERED_DIRECTIONS[inline cache[i] & 0b111];
        bestPos = at.translate(x, y);
    }
}

fn pathFinish(from: MapLocation, to: MapLocation): Direction {
    at = from;
    tx = to.x - from.x;
    ty = to.y - from.y;
    let r2 = if rc.getType().visionRadiusSquared == 34 { 34 } else { 20 };
    if tx*tx + ty*ty <= r2 {
        // Go directly to target
        let s = cache[inline (5 + tx) * 11 + 5 + ty];
        if s != 100000 << 3 {
            return ORDERED_DIRECTIONS[inline s & 0b111];
        }
    }

    // We could pick the closest point to the target
    // but we basically never want to pick a specific point *unless* it's the target
    // e.g. if we have an obstacle right in the way we want to go around, but that way we would run into it
    // so we use score + max coordinate distance to target
    // These are the positions on the outside of the vision radius to search
    bestScore = 100000;
    bestDir = null;
    bestPos = null;
    if rc.getType().visionRadiusSquared == 34 {
        for i in unroll 0..7 {
            fLoc(-5, -5 + 2 + i);
            fLoc(5, -5 + 2 + i);
            fLoc(-5 + 2 + i, 5);
            fLoc(-5 + 2 + i, -5);
        }
        fLoc(4, 4);
        fLoc(4, -4);
        fLoc(-4, 4);
        fLoc(-4, -4);
    } else {
        for i in unroll 0..5 {
            fLoc(-4, -4 + 2 + i);
            fLoc(4, -4 + 2 + i);
            fLoc(-4 + 2 + i, 4);
            fLoc(-4 + 2 + i, -4);
        }
        fLoc(3, 3);
        fLoc(3, -3);
        fLoc(-3, 3);
        fLoc(-3, -3);
    }
    if bestPos != null {
        rc.setIndicatorLine(from, bestPos, 255, 0, 0);
        rc.setIndicatorLine(from, from.add(bestDir), 0, 0, 255);
    }
    bestDir
}

let lastTarget: MapLocation = null;

const N_SAVED_LOCS = 3;
let lastLocs: [MapLocation] = [; N_SAVED_LOCS];
let lastLocIdx = 0;
fn inline addLoc(loc: MapLocation) {
    lastLocs[lastLocIdx] = loc;
    lastLocIdx = (lastLocIdx + 1) % N_SAVED_LOCS;
}
fn inline clearLocs() {
    for i in 0..N_SAVED_LOCS {
        lastLocs[i] = null;
    }
    lastLocIdx = 0;
}
fn inline hasLoc(loc: MapLocation): bool {
    let found = false;
    for i in lastLocs {
        if loc == i {
            found = true;
            break;
        }
    }
    found
}

let greedyTurns = 0;
fn targetMove(exploring: bool): bool throws GameActionException {
    let loc = rc.getLocation();

    if (target == null || target == loc || (exploring && rc.canSenseLocation(target)) || (exploring && rc.canSenseLocation(target) && !rc.onTheMap(target))) {
        if exploring {
            retarget();
        } else {
            return false;
        }
    }

    if target != lastTarget {
        clearLocs();
    }

    rc.setIndicatorLine(loc, target, 0, 255, 0);

    let dir = if greedyTurns <= 0 && (bytecodeLeft() > 4500 || (rc.getType().visionRadiusSquared != 34 && bytecodeLeft() >= 3000)) {
        let btc = bytecodeNum();
        let tStart = rc.getRoundNum();
        pathStart();
        let startBtc = bytecodeNum();
        if rc.getRoundNum() != tStart { startBtc += rc.getType().bytecodeLimit; }
        pathIter();
        let iterBtc = bytecodeNum();
        if rc.getRoundNum() != tStart { iterBtc += rc.getType().bytecodeLimit; }
        let dir = pathFinish(loc, target);
        let finishBtc = bytecodeNum();
        if rc.getRoundNum() != tStart { finishBtc += rc.getType().bytecodeLimit; }

        let greedy = false;
        let oldDir = dir;
        if dir != null {
            if hasLoc(loc.add(dir)) {
                greedyTurns = 5;
                dir = pathfindGreedy();
                greedy = true;
            }
        }

        rc.setIndicatorString("BFS BTC: " + (finishBtc - btc)
            + ", start: " + (startBtc - btc)
            + ", iter: " + (iterBtc - startBtc)
            + ", end: " + (finishBtc - iterBtc)
            + ". g? " + greedy);

        dir
    } else {
        rc.setIndicatorString("GREEDY PATHFINDING ENABLED");
        greedyTurns -= 1;
        pathfindGreedy()
    };

    if dir != null {
        if rc.canMove(dir) {
            lastTarget = target;
            addLoc(loc);
            rc.move(dir);
            return true;
        } else {
            println("Went over and moved illegally; would throw exception! Dir = " + dir);
        }
    }
    false
}
