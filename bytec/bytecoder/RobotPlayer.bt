extern {
    import battlecode.common.*;

    import java.util.Random;
}

use Common::*;
use Mem::Cmd;

extern class Random {
    constructor(seed: i32);
    fn nextInt(max: i32): i32;
    fn nextBool(): bool = "nextBoolean";
}

let turnCount = 0;
let rng = Random(12);
let directions: [Direction] = [
    Direction::NORTH,
    Direction::NORTHEAST,
    Direction::EAST,
    Direction::SOUTHEAST,
    Direction::SOUTH,
    Direction::SOUTHWEST,
    Direction::WEST,
    Direction::NORTHWEST,
];
let team: Team;

let rc: RobotController;

fn pub run(rc2: RobotController) {
    rc = rc2;
    team = rc.getTeam();
    loop {
        extern "try {";

        Mem::maintain();

        match rc.getType() {
            ARCHON => runArchon(),
            MINER => Miner::runMiner(),
            SOLDIER => Soldier::runSoldier(),
            BUILDER => runBuilder(),
            WATCHTOWER => Soldier::runWatchtower(),
            else => {},
        }

        extern "} catch (Exception e) { e.printStackTrace(); }";
        clockYield();
    }
}

// What number archon this is, i.e. how many archons go before it each turn
// TODO update when a friendly archon dies
let archonOrder = 0;
let wasUnderAttack = false;
let archonCount = 0;

let toBuild: [RobotType] = [RobotType::MINER, RobotType::SOLDIER];
let toBuildIdx = 0;
let sacTurns = 0;
let builderTurns = 0;

let attacking: MapLocation;
let otherAttacking = false;

fn runArchon() throws GameActionException {
    if archonCount != rc.getArchonCount() {
        archonCount = rc.getArchonCount();
        archonOrder = rc.readSharedArray(14);
        if archonOrder == rc.getArchonCount() - 1 {
            rc.writeSharedArray(14, 0);
        } else {
            rc.writeSharedArray(14, archonOrder + 1);
        }
    }


    let miner_dir = Direction::SOUTH;
    let best_dist = 10000;
    let best_lead = 0;
    let lead_locs = rc.senseNearbyLocationsWithLead(rc.getType().visionRadiusSquared);
    for l in lead_locs {
        let dist = l.distanceSquaredTo(rc.getLocation());
        if dist == 0 {
            continue;
        }
        let lead = rc.senseLead(l);
        if (lead > 1 && dist < best_dist) || (lead > best_lead && dist <= best_dist) {
            best_dist = dist;
            best_lead = lead;
            miner_dir = rc.getLocation().dirTo(l);
        }
    }
    if rc.getRoundNum() == 1 {
        rc.buildRobot(RobotType::MINER, miner_dir);
    } else {
        if archonOrder == 0 {
            Mem::clearCmds();
        }
        sacTurns -= 1;
        builderTurns -= 1;
        for i in Mem::commands {
            match i {
                Attack(l) => if attacking == null {
                    attacking = l;
                    otherAttacking = true;
                }
                EndAttack => if attacking != null {
                    attacking = null;
                    otherAttacking = false;
                }
                Protect(_) => {},
            }
        }
        let availableSoldiers = Mem::getAvailableSoldiers();
        if archonOrder == rc.getArchonCount() - 1 {
            Mem::clearAvailableSoldiers();
        }
        // Make sure the attack target still exists
        if attacking != null {
            let found = false;
            for i in Mem::archons {
                if i == attacking {
                    found = true;
                    break;
                }
            }
            if !found || availableSoldiers < 5 {
                attacking = null;
                otherAttacking = false;
                Mem::pushCmd(Cmd::EndAttack);
                rc.setIndicatorString("End attack");
            }
        }

        // let numMiners = 0;
        // for i in Mem::nearbyRobotsMe {
        //     if i.type == RobotType::MINER {
        //         numMiners += 1;
        //     }
        // }
        let nLead = lead_locs.len();
        // if nLead < 2 { nLead = 2 }
        let nearbyEnemies = 0;
        for i in Mem::nearbyRobotsThem {
            if i.type.damage > 0 {
                nearbyEnemies += 1;
            }
        }
        let nearbyDefenders = 0;
        for i in Mem::nearbyRobotsMe {
            if i.type.damage > 0 {
                nearbyDefenders += 1;
            }
        }

        let otherUnderAttack = rc.readSharedArray(13);

        let underAttack = nearbyEnemies > nearbyDefenders;// || nearbyDefenders == 0;
        if underAttack && !wasUnderAttack {
            rc.writeSharedArray(13, archonOrder + 1);
        } else if wasUnderAttack && !underAttack && otherUnderAttack - 1 == archonOrder {
            rc.writeSharedArray(13, 0);
        }
        if underAttack {
            Mem::pushCmd(Cmd::Protect(rc.getLocation()));
        }
        wasUnderAttack = underAttack;

        // rc.setIndicatorString("14: " + rc.readSharedArray(14) + ", 13: " + rc.readSharedArray(13));
        let ty = toBuild[toBuildIdx];
        if underAttack {
            ty = RobotType::SOLDIER;
            rc.setIndicatorString("[V] Under attack!");
            if attacking != null {
                attacking = null;
                otherAttacking = false;
                Mem::pushCmd(Cmd::EndAttack);
                rc.setIndicatorString("End attack");
            }
        } else {
            if !otherAttacking && otherUnderAttack == 0 && Mem::archons.len() > 0 && availableSoldiers > 5 && attacking == null {
                attacking = Mem::archons[0];
            }
            if nLead < 15 && sacTurns <= 0 {
                ty = RobotType::BUILDER;
                if rc.getActionCooldownTurns() == 0 && rc.getTeamLeadAmount(team) > ty.buildCostLead {
                    sacTurns = 30;
                    rc.writeSharedArray(12, 1);
                }
                // TODO what should these heuristics be?
            } else if rc.getTeamLeadAmount(team) >= 400 && builderTurns <= 0 {
                ty = RobotType::BUILDER;
                if rc.getActionCooldownTurns() == 0 && rc.getTeamLeadAmount(team) > ty.buildCostLead {
                    builderTurns = 50;
                    rc.writeSharedArray(12, 0);
                }
            }
        }
        if attacking != null && !otherAttacking {
            Mem::pushCmd(Cmd::Attack(attacking));
            rc.setIndicatorString("ATTACK!");
        }
        // else if otherUnderAttack != 0 {
        //     rc.setIndicatorString("Under attack: " + (otherUnderAttack - 1));
        // }
        // let ty = if rng.nextInt(2) == 0 && numMiners < nLead && Mem::nearbyRobotsThem.len() < Mem::nearbyRobotsMe.len()  {
        //     RobotType::MINER
        // } else {
        //     RobotType::SOLDIER
        // };
        // Don't let one Archon dominate
        // They take turns spawning, or they can override the order if there's enough for each other archon to spawn a soldier to defend itself
        let turn = rc.getRoundNum() % rc.getArchonCount();
        // let roundsUntilOurs = if turn <= archonOrder { archonOrder - turn } else { archonOrder - turn + rc.getArchonCount() };
        if turn == archonOrder
            || rc.getTeamLeadAmount(team) > ty.buildCostLead + RobotType::SOLDIER.buildCostLead * (rc.getArchonCount() - archonOrder - 1) {
        // if underAttack || otherUnderAttack == 0 {
            if ty == RobotType::MINER && best_lead > 1 {
                if rc.canBuildRobot(ty, miner_dir) {
                    rc.buildRobot(ty, miner_dir);
                    toBuildIdx = (toBuildIdx + 1) % toBuild.len();
                }
            }
            for dir in directions {
                if rc.canBuildRobot(ty, dir) {
                    rc.buildRobot(ty, dir);
                    toBuildIdx = (toBuildIdx + 1) % toBuild.len();
                    break;
                }
            }
        }
        // } else if roundsUntilOurs >= rc.getActionCooldownTurns() + 2 {
        //     // Try to repair a robot in range
        //     for i in Mem::nearbyRobotsMe {
        //         if i.health <= i.type.health - RobotType::ARCHON.getHealing(rc.getLevel()) && rc.canRepair(i.location) {
        //             rc.repair(i.location);
        //             break;
        //         }
        //     }
        // }
    }
}

let sac = false;
let builderStart = true;
fn runBuilder() throws GameActionException {
    let loc = rc.getLocation();
    if builderStart {
        builderStart = false;
        sac = rc.readSharedArray(12) == 1;
    }
    if sac {
        // Sacrifice itself
        if rc.senseLead(loc) == 0 {
            rc.disintegrate();
        } else {
            for dir in directions {
                let l = loc.add(dir);
                if rc.canMove(dir) && rc.senseLead(l) == 0 {
                    rc.move(dir);
                    return;
                }
            }
            Paths::targetMove(true);
        }
    } else {
        // Build watchtowers
        // TODO better watchtower placement
        let nWatchtowers = 0;
        let archonDist = 1000;
        let repairLoc: MapLocation = null;
        let repairDist = 1000;
        for i in Mem::nearbyRobotsMe {
            if i.type == RobotType::WATCHTOWER {
                nWatchtowers += 1;
                if i.health != i.type.health {
                    let dist = i.location.distanceSquaredTo(loc);
                    if dist < repairDist {
                        repairDist = dist;
                        repairLoc = i.location;
                    }
                }
            } else if i.type == RobotType::ARCHON {
                let dist = i.location.distanceSquaredTo(loc);
                if dist < archonDist {
                    archonDist = dist;
                }
            }
        }
        if repairLoc != null {
            if rc.canRepair(repairLoc) {
                rc.repair(repairLoc);
                return;
            }
            Paths::target = repairLoc;
        } if nWatchtowers < 2 && archonDist > 13 {
            // Watchtower building mode
            let best_pass = 10000;
            let best_dir: Direction = null;
            for dir in directions {
                let l = loc.add(dir);
                if !rc.onTheMap(l) || rc.senseRobotAtLocation(l) != null {
                    continue;
                }
                let pass = rc.senseRubble(l);
                if pass < best_pass {
                    best_pass = pass;
                    best_dir = dir;
                }
            }
            if best_dir != null && rc.canBuildRobot(RobotType::WATCHTOWER, best_dir) {
                rc.buildRobot(RobotType::WATCHTOWER, best_dir);
            }
        }
        Paths::targetMove(true);
    }
}
