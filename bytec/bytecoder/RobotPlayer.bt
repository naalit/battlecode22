extern {
    package bytecoder;
    import battlecode.common.*;

    import java.util.Random;
}

use Common::*;

extern class Random {
    constructor(seed: i32);
    fn nextInt(max: i32): i32;
    fn nextBool(): bool = "nextBoolean";
}

let turnCount = 0;
let rng = Random(12);
let directions = [
    Direction::NORTH,
    Direction::NORTHEAST,
    Direction::EAST,
    Direction::SOUTHEAST,
    Direction::SOUTH,
    Direction::SOUTHWEST,
    Direction::WEST,
    Direction::NORTHWEST,
];
let team: Team;

let rc: RobotController;

fn pub run(rc2: RobotController) {
    rc = rc2;
    team = rc.getTeam();
    loop {
        extern "try {";

        Mem::maintain();

        match rc.getType() {
            ARCHON => runArchon(),
            MINER => runMiner(),
            SOLDIER => Soldier::runSoldier(),
            else => {},
        }

        extern "} catch (Exception e) { e.printStackTrace(); }";
        clockYield();
    }
}

// What number archon this is, i.e. how many archons go before it each turn
// TODO update when a friendly archon dies
let archonOrder = 0;

fn runArchon() throws GameActionException {
    if rc.getRoundNum() == 1 {
        archonOrder = rc.readSharedArray(15);
        rc.writeSharedArray(15, archonOrder + 1);

        rc.buildRobot(RobotType::MINER, Direction::SOUTH);
    } else {
        let numMiners = 0;
        for i in Mem::nearbyRobotsMe {
            if i.type == RobotType::MINER {
                numMiners += 1;
            }
        }
        let lead = rc.senseNearbyLocationsWithLead(rc.getType().visionRadiusSquared);
        let nLead = lead.len();
        if nLead < 2 { nLead = 2 }

        let ty = if rng.nextInt(2) == 0 && numMiners < nLead && Mem::nearbyRobotsThem.len() < Mem::nearbyRobotsMe.len()  {
            RobotType::MINER
        } else {
            RobotType::SOLDIER
        };
        // Don't let one Archon dominate
        // They take turns spawning, or they can override the order if there's enough for each other archon to spawn a soldier to defend itself
        if rc.getRoundNum() % rc.getArchonCount() == archonOrder
            || rc.getTeamLeadAmount(team) > ty.buildCostLead + RobotType::SOLDIER.buildCostLead * (rc.getArchonCount() - archonOrder - 1) {
            for dir in directions {
                if rc.canBuildRobot(ty, dir) {
                    rc.buildRobot(ty, dir);
                }
            }
        }
    }
}

fn runMiner() throws GameActionException {
    // Mine
    let at = rc.getLocation();
    let some_left = false;
    for dx in -1..1 {
        for dy in -1..1 {
            let loc = at.translate(dx, dy);
            while rc.canMineGold(loc) {
                rc.mineGold(loc);
            }
            // Leave 1 so it regenerates
            while rc.canMineLead(loc) && rc.senseLead(loc) > 1 {
                rc.mineLead(loc);
            }
            if !some_left && rc.canSenseLocation(loc) && (rc.senseLead(loc) > 1 || rc.senseGold(loc) > 0) {
                some_left = true;
            }
        }
    }

    // Move, if we're done mining
    if !some_left {
        // If we can see any metals, go mine them
        let best_lead = 1;
        let best_loc: MapLocation = null;
        for l in rc.senseNearbyLocationsWithGold(rc.getType().visionRadiusSquared) {
            let lead = rc.senseLead(l) + rc.senseGold(l) * 50;
            if lead > best_lead {
                best_lead = lead;
                best_loc = l;
            }
        }
        for l in rc.senseNearbyLocationsWithLead(rc.getType().visionRadiusSquared) {
            let lead = rc.senseLead(l) + rc.senseGold(l) * 50;
            if lead > best_lead {
                best_lead = lead;
                best_loc = l;
            }
        }

        if best_loc != null {
            Paths::target = best_loc;
        }
        Paths::targetMove(true);
    }
}
