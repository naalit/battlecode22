extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

// We generally try defend this archon
// There is usually only one in range so we only bother with one
let closestArchon: RobotInfo;
let archonInRange = false;
define RETREAT_HEALTH = 10;

let protectTurns = 20;
fn attackTarget(): (RobotInfo, RobotInfo) {
    nearbyEnemyHP = 0;
    let loc = rc.getLocation();
    let radius = rc.getType().actionRadiusSquared;

    let near: RobotInfo = null;
    let far: RobotInfo = null;
    for bot in Mem::nearbyRobotsThem {
        let isNear = bot.location.isWithinDistanceSquared(loc, radius);
        let ref = if isNear { near } else { far };

        if unitBetter(ref, bot) {
            if isNear {
                near = bot;
            } else {
                far = bot;
            }
        }
    }
    (near, far)
}

fn runWatchtower() throws GameActionException {
    let targets = attackTarget();
    // TODO destructuring
    let attack_target = targets.0;
    let move_target = targets.1;

    // Attack
    if attack_target != null {
        if rc.canAttack(attack_target.location) {
            rc.attack(attack_target.location);
        }
    }
}

class LocInfo {
    let loc: MapLocation;
    let enemyDamage: i32;
    let rubble: i32;
    let bestEnemy: RobotInfo;
    let distToEnemy: i32;
    let archonDist: i32;

    fn init(loc: MapLocation) throws GameActionException {
        self.loc = loc;
        self.rubble = rc.senseRubble(loc);
        self.enemyDamage = 0;
        self.distToEnemy = 100000;
        self.archonDist = closestArchon.location.distanceSquaredTo(loc);
    }
}
fn unitBetter(old: RobotInfo, new: RobotInfo): bool {
    // Targeting priority:
    fn inline priority(ty: RobotType): i32 = match ty {
        // Sages are valuable and dangerous, kill on sight
        SAGE => 7,
        // The most immediate threat, if we don't kill them they'll kill us
        SOLDIER => 6,
        // We'll need to kill these to take out a watchtower
        // probably should have special-case code for actually seeing a watchtower though
        BUILDER => 5,
        // Another threat
        WATCHTOWER => 4,
        // We probably won't take out an Archon anytime soon with Soldiers, but doing damage on it is good
        // Really these last three are TBD though
        ARCHON => 3,
        MINER => 2,
        LABORATORY => 1,
    };

    if old == null {
        true
    } else if priority(new.type) > priority(old.type) {
        true
    } else if priority(new.type) == priority(old.type) {
        // Pick the lowest hp to kill more units more quickly, which is better than just doing damage
        if new.health < old.health {
            true
        } else if new.health == old.health {
            // Target the one closest to the Archon if there is one
            if closestArchon != null && new.location.isWithinDistanceSquared(closestArchon.location, closestArchon.location.distanceSquaredTo(old.location)) {
                // Otherwise just pick the closest one
                if closestArchon != null {
                    new.location.isWithinDistanceSquared(at, at.distanceSquaredTo(old.location))
                } else {
                    false
                }
            } else {
                false
            }
        } else {
            false
        }
    } else {
        false
    }
}
fn locBetter(old: LocInfo, new: LocInfo): bool {
    if old == null {
        true
    // } else if old.rubble > new.rubble + 10 {
    //     true
    } else if new.rubble <= old.rubble + 20 {
        if  new.enemyDamage <= 300 / (10 + new.rubble) && 
            new.bestEnemy != null && 
            new.bestEnemy.health <= rc.getHealth() && 
            unitBetter(old.bestEnemy, new.bestEnemy)
            {
            true
        } else if old.enemyDamage <= 300 / (10 + old.rubble) && 
            old.bestEnemy != null && 
            old.bestEnemy.health <= rc.getHealth() && 
            unitBetter(new.bestEnemy, old.bestEnemy)
            {
                false
        } else
        if new.enemyDamage < old.enemyDamage {
            true
        } else if new.enemyDamage == old.enemyDamage {
            if rc.getHealth() <= RETREAT_HEALTH && new.archonDist < old.archonDist {
                true
            } else if new.rubble < old.rubble && new.enemyDamage > 0 {
                true
            } else if new.rubble <= old.rubble + 10 {
                if new.bestEnemy != null && unitBetter(old.bestEnemy, new.bestEnemy) {
                    true
                } else if old.bestEnemy == null || !unitBetter(new.bestEnemy, old.bestEnemy) {
                    if new.rubble < old.rubble {
                        true
                    } else 
                    if nearbyFriendlyHP >= nearbyEnemyHP {
                        new.distToEnemy < old.distToEnemy
                    } else {
                        new.distToEnemy > old.distToEnemy
                    }
                }
            } else {
                false
            }
        } else {
            false
        }
    } else {
        false
    }
}
fn inline updateLoc(loc: LocInfo, unit: RobotInfo) {
    if loc != null {
        let d = loc.loc.distanceSquaredTo(unit.location);
        if unit.type.damage > 0 && d <= unit.type.actionRadiusSquared {
            let rubble = rc.senseRubble(unit.location);
            loc.enemyDamage += (unit.type.damage * 100) / (10 + rubble);
        }
        if d <= actionRadius {
            if unitBetter(loc.bestEnemy, unit) {
                loc.bestEnemy = unit;
                loc.distToEnemy = d;
            }
        }
    }
}

let at: MapLocation;
let actionRadius: i32;
let nearbyFriendlyHP: i32;
let nearbyEnemyHP: i32;
let nearbyFriendlyDamage: i32;
fn doMicro() throws GameActionException {
    at = rc.getLocation();
    actionRadius = rc.getType().actionRadiusSquared;

    let n: LocInfo = null;
    let locs: [LocInfo; 9] = [n,n,n,n,n,n,n,n,n];
    let cloc: LocInfo = null;
    let directions = allDirections();
    for i in unroll 0..9 {
        let dir = directions[i];
        if dir == Direction::CENTER || rc.canMove(dir) {
            locs[i] = LocInfo();
            locs[i].init(at.add(dir));
            if dir == Direction::CENTER {
                cloc = locs[i];
            }
        }
    }
    nearbyEnemyHP = 0;
    for bot in Mem::nearbyRobotsThem {
        if bot.type.damage > 0 {
            protectTurns = 20;
            nearbyEnemyHP += bot.health;
        }
        for loc in locs {
            updateLoc(loc, bot);
        }
    }
    nearbyFriendlyHP = rc.getHealth();
    nearbyFriendlyDamage = 0;
    for i in Mem::nearbyRobotsMe {
        if i.type.damage > 0 {
            nearbyFriendlyHP += i.health;
            let rubble = rc.senseRubble(i.location);
            nearbyFriendlyDamage += (i.type.damage * 10) / (10 + rubble);
        }
    }

    let best: LocInfo = cloc;
    for loc in locs {
        if loc != null {
            if locBetter(best, loc) {
                best = loc;
            }
        }
    }
    rc.setIndicatorString("MICRO: Damage: " + best.enemyDamage + ", rubble: " + best.rubble);
    if best == null {
        println("ERROR! best should not be null, CENTER is always an option");
    }
    // We can attack before or after moving, do whichever one is better
    let bestNow = cloc.bestEnemy;
    let bestThen = best.bestEnemy;
    if bestNow != null && unitBetter(bestThen, bestNow) {
        if bestNow != null && rc.canAttack(bestNow.location) {
            rc.attack(bestNow.location);
        }
    }
    if best.loc != at {
        rc.move(at.dirTo(best.loc));
    }
    if bestThen != null && rc.canAttack(bestThen.location) {
        rc.attack(bestThen.location);
    }
}

fn retreat(): bool throws GameActionException {
    if closestArchon != null {
        Paths::target = closestArchon.location;
        Paths::targetMove(false, false)
    } else {
        false
    }
}

let lastProtect: MapLocation = null;
let lastSoldier: MapLocation = null;
fn runSoldier() throws GameActionException {
    let loc = rc.getLocation();

    for i in Mem::nearbyRobotsMe {
        if i.type == RobotType::ARCHON {
            if closestArchon == null || i.location.isWithinDistanceSquared(loc, closestArchon.location.distanceSquaredTo(loc)) {
                closestArchon = i;
                archonInRange = true;
            }
        }
    }

    // Move
    // Defend our Archon if we're not in very early game and we've seen enemies recently
    // If we don't see enemy soldiers for 20 turns, we leave so we don't waste soldiers defending archons that aren't under attack

    let protectStill = false;

    // Go towards an enemy, but don't abandon the archon
    // just kidding abandon it as much as you want
    let protect = false;//archonInRange && closestArchon != null && protectTurns > 0 && rc.getRoundNum() > 40;
    let lowPass = false;
    if Mem::nearbyRobotsThem.len() > 0 {
        doMicro();
        return;
    } else if rc.getHealth() <= RETREAT_HEALTH && closestArchon != null && !closestArchon.location.isWithinDistanceSquared(loc, RobotType::ARCHON.actionRadiusSquared) && retreat() {
        return;
    } else if protect || (closestArchon != null && rc.getHealth() < rc.getType().health) {
        // Try to stay about 13 units^2 of the archon so we're not in the way
        // If we need to heal, make sure we stay within the archon's action radius as well
        // and stay nearby until we're fully healed and can go back to the fight
        let needsHeal = rc.getHealth() < rc.getType().health;
        protectTurns -= 1;
        let r2 = 13;
        let closest: Direction = null;
        let closest_d = 10000;
        for dir in RobotPlayer::directions {
            let arch = closestArchon.location;
            let l = loc.add(dir).add(dir);
            if rc.canMove(dir) && rc.onTheMap(l) {
                let d = l.distanceSquaredTo(arch);
                if (arch.x + 6 * dir.dx > rc.getMapWidth()
                    || arch.y + 6 * dir.dy > rc.getMapHeight()
                    || arch.x - 6 < 0
                    || arch.y - 6 < 0)
                    && d >= loc.distanceSquaredTo(arch) {
                        continue;
                    }
                d = abs(d - r2);
                if (d < closest_d && (!needsHeal || d <= RobotType::ARCHON.actionRadiusSquared)) {
                    closest = dir;
                    closest_d = d;
                }
            }
        }
        if closest != null {
            Paths::target = loc.add(closest);
        }
    } else if Mem::commands.len() > 0 {
        let available = true;
        for i in Mem::commands {
            match i {
                Attack(l) => Paths::target = l,
                EndAttack => Paths::target = null,
                Protect(l) => {
                    protectStill = true;
                    lastProtect = l;
                    Paths::target = l;
                    available = false;
                }
            }
        }
        if available {
            Mem::addAvailableSoldier();
        }
        if rc.getHealth() > 20 && Mem::closestSoldier != null && (Paths::target == null || Paths::target == lastSoldier || Paths::target == Paths::lastRetarget) {
            Paths::target = Mem::closestSoldier;
            Paths::lastRetarget = Mem::closestSoldier;
            lastSoldier = Mem::closestSoldier;
        }
    } else {
        Mem::addAvailableSoldier();
        if rc.getHealth() > 20 && Mem::closestSoldier != null && (Paths::target == null || Paths::target == lastSoldier || Paths::target == Paths::lastRetarget) {
            Paths::target = Mem::closestSoldier;
            Paths::lastRetarget = Mem::closestSoldier;
            lastSoldier = Mem::closestSoldier;
        }
    }
    if !protectStill && lastProtect != null {
        if lastProtect == Paths::target {
            Paths::target = null;
        }
        lastProtect = null;
        lowPass = true;
    }
    Paths::targetMove(true, lowPass);
}