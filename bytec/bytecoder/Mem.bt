extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

// Cache these, 200 bytecode is better than splitting it manually but we definitely don't want to do it twice
let nearbyRobotsMe: [RobotInfo] = [];
let nearbyRobotsThem: [RobotInfo] = [];
let seenEnemies = false;
let minerCorners: [(bool, bool)] = [; 4];
let cornerLocs: [MapLocation] = [];

// Run this once a turn, before doing other things.
// It caches nearby robots, communicates stuff it found, etc.
let max_btc = 0;
let tot_btc = 0;
let maintain_count = 0;
fn maintain() throws GameActionException {
    let start_btc = bytecodeNum();

    let visRadius = rc.getType().visionRadiusSquared;
    nearbyRobotsMe = rc.senseNearbyRobotsT(visRadius, rc.getTeam());
    nearbyRobotsThem = rc.senseNearbyRobotsT(visRadius, rc.getTeam().opponent());

    if !seenEnemies {
        seenEnemies = rc.readSharedArray(SEEN_ENEMIES_LOC) != 0;
        if !seenEnemies && nearbyRobotsThem.len() > 0 {
            seenEnemies = true;
            rc.writeSharedArray(SEEN_ENEMIES_LOC, 1);
        }
    }

    if rc.getType() == RobotType::ARCHON {
        let corners = rc.readSharedArray(MINER_CORNER_LOC);
        if corners >> 4 != 0 {
            rc.writeSharedArray(MINER_CORNER_LOC, corners & 0b1111);
        }
    } else if rc.getType() == RobotType::MINER {
        let corners = rc.readSharedArray(MINER_CORNER_LOC);
        for i in unroll 0..4 {
            minerCorners[i] = (corners & (1 << (i + 4)) != 0, corners & (1 << i) != 0);
        }
        if cornerLocs.len() == 0 {
            cornerLocs.push(MapLocation(0, 0));
            cornerLocs.push(MapLocation(0, rc.getMapHeight() - 1));
            cornerLocs.push(MapLocation(rc.getMapWidth() - 1, 0));
            cornerLocs.push(MapLocation(rc.getMapWidth() - 1, rc.getMapHeight() - 1));
        }
        let changed = false;
        for i in 0..4 {
            if !minerCorners[i].1 {
                let loc = cornerLocs[i];
                if rc.canSenseLocation(loc) {
                    minerCorners[i] = (false, true);
                    corners |= 1 << i;
                    changed = true;
                }
            }
        }
        if changed {
            rc.writeSharedArray(MINER_CORNER_LOC, corners);
        }
    }

    // if rc.getType() == RobotType::ARCHON || rc.getType() == RobotType::SOLDIER {
        updateSoldiers();
    // }

    readCmds();

    readArchons();
    searchArchons();

    let end_btc = bytecodeNum();
    let btc = end_btc - start_btc;
    maintain_count += 1;
    tot_btc += btc;
    if btc > max_btc {
        max_btc = btc;
    }
    // rc.setIndicatorString("Max maintain() btc: " + max_btc + ", avg: " + tot_btc / maintain_count);
}

fn inline minerGoForCorner(i: i32) {
    minerCorners[i] = (true, false);
    let corners = rc.readSharedArray(MINER_CORNER_LOC);
    corners |= 1 << (i + 4);
    rc.writeSharedArray(MINER_CORNER_LOC, corners);
}

// A location takes up 12 bits
// ...this is a lot easier than last year
fn encodeLoc(loc: MapLocation): i32 = (loc.y << 6) | loc.x;
fn decodeLoc(x: i32): MapLocation = MapLocation(x & 0b111111, (x >> 6) & 0b111111);

// 0-??: enemy archon list
// ??-8:
//  9: four corners in low digits for miners
// 10: total number of miners
// 11: seen enemies yet
// 12: lead farming marker for builders (not used currently)
// 13: reports last archon under attack
// 14: friendly archon order finding
// 15: number of available soldiers
// 16-23: command queue 1
// 24-31: command queue 2
// 32-47: enemy soldiers
// 48-63:
let ARCHON_LOC = 0;
let CMD_LOC = 16;
let CMD_LEN = 8;
let SEEN_ENEMIES_LOC = 11;
let ENEMY_LOC = 32;
let ENEMY_LEN = 16;
let MINER_CORNER_LOC = 9;
// There are two command queues that we switch between
// This is so that Archons can read messages sent last turn by other Archons later in the order
fn cmdLoc(): i32 throws GameActionException {
    CMD_LOC + CMD_LEN * (rc.getRoundNum() % 2)
}
fn cmdLocOther(): i32 throws GameActionException {
    CMD_LOC + CMD_LEN * ((rc.getRoundNum() + 1) % 2)
}
let AVAILABLE_SOLDIERS = 15;
fn getAvailableSoldiers(): i32 throws GameActionException {
    rc.readSharedArray(AVAILABLE_SOLDIERS)
}
fn clearAvailableSoldiers() throws GameActionException {
    rc.writeSharedArray(AVAILABLE_SOLDIERS, 0);
}
fn addAvailableSoldier() throws GameActionException {
    rc.writeSharedArray(AVAILABLE_SOLDIERS, rc.readSharedArray(AVAILABLE_SOLDIERS) + 1);
}
let MINER_COUNT_LOC = 15;
fn getMinerCount(): i32 throws GameActionException {
    rc.readSharedArray(MINER_COUNT_LOC)
}
fn clearMinerCount() throws GameActionException {
    rc.writeSharedArray(MINER_COUNT_LOC, 0);
}
fn addMinerCount() throws GameActionException {
    rc.writeSharedArray(MINER_COUNT_LOC, rc.readSharedArray(AVAILABLE_SOLDIERS) + 1);
}

// (x, y, last_seen_turn)
// soldiers expire after a few turns
// this actually considers watchtowers and sages too

// define SOLDIER_EXPIRE_TURNS = 1;

let soldierList: [(MapLocation, i32)] = [];

ifdef SOLDIER_EXPIRE_TURNS
let soldierIdxs: [i32];

let closestSoldier: MapLocation = null;
let toAdd: [MapLocation] = [];
ifdef SOLDIER_EXPIRE_TURNS
fn inline addSoldier(loc: MapLocation, width: i32, round: i32, found: bool) {
    let x = loc.x;
    let y = loc.y;
    let idx = soldierIdxs[y*width + x] - 1;
    if idx >= 0 {
        soldierList[idx] = (loc, round);
    } else {
        soldierIdxs[y*width + x] = soldierList.len();
        soldierList.push((loc, round));
        if found {
            if toAdd.len() < 4 {
                toAdd.push(loc);
            }
        }
    }
}
ifdef !SOLDIER_EXPIRE_TURNS
fn inline addSoldier(loc: MapLocation, width: i32, round: i32, found: bool) {
    soldierList.push((loc, round));
    if found {
        if toAdd.len() < 4 {
            toAdd.push(loc);
        }
    }
}
fn updateSoldiers() throws GameActionException {
    let at = rc.getLocation();
    soldierList.clear();

    ifdef SOLDIER_EXPIRE_TURNS
    if soldierIdxs.len() == 0 {
        soldierIdxs = [; rc.getMapWidth() * rc.getMapHeight()];
    }

    let width = rc.getMapWidth();
    let round = rc.getRoundNum();
    let doSend = round % 2 == 0;
    if !doSend {
        toAdd.clear();
        if rc.getType() == RobotType::ARCHON && RobotPlayer::archonOrder == 0 {
            for i in ENEMY_LOC..(ENEMY_LOC+ENEMY_LEN) {
                let r = rc.readSharedArray(i);
                if r == 0 {
                    break;
                } else {
                    rc.writeSharedArray(i, 0);
                }
            }
        }
    }
    // Add new soldiers we can see
    for i in nearbyRobotsThem {
        if i.type.damage > 0 {
            addSoldier(i.location, width, round, true);
        }
    }
    // Add new soldiers from comms
    let sLen = 0;
    for i in ENEMY_LOC..(ENEMY_LOC+ENEMY_LEN) {
        let r = rc.readSharedArray(i);
        if r == 0 {
            break;
        } else {
            sLen += 1;
            addSoldier(decodeLoc(r - 1), width, round, false);
        }
    }

    // Remove old soldiers
    closestSoldier = null;
    let closestD = 100000;
    ifdef !SOLDIER_EXPIRE_TURNS
    for i in soldierList {
        let d = at.distanceSquaredTo(i.0);
            if d < closestD {
                closestSoldier = i.0;
                closestD = d;
            }
    }
    ifdef SOLDIER_EXPIRE_TURNS {
        let i = 0;
        let minRound = round - SOLDIER_EXPIRE_TURNS;
        while i < soldierList.len() {
            if soldierList[i].1 < minRound {
                let loc = soldierList[i].0;
                soldierIdxs[loc.y*width + loc.x] = 0;
                if i == soldierList.len() - 1 {
                    let _ = soldierList.pop();
                } else {
                    // soldierList.swap_remove(i);
                    soldierList[i] = soldierList.pop();
                }
            } else {
                let d = at.distanceSquaredTo(soldierList[i].0);
                if d < closestD {
                    closestSoldier = soldierList[i].0;
                    closestD = d;
                }
                i += 1;
            }
        }
    }

    if doSend {
        while sLen < ENEMY_LEN && toAdd.len() > 0 {
            let loc = toAdd.pop();
            rc.writeSharedArray(ENEMY_LOC + sLen, encodeLoc(loc) + 1);
            sLen += 1;
        }
    }
}

enum Cmd {
    Attack(MapLocation),
    Protect(MapLocation),
    EndAttack;

    // 0000 000000000000
    // ^- type     ^- location or other payload
    fn encode(): i32 = match self {
        Attack(l) => (1 << 14) | encodeLoc(l),
        EndAttack => 2 << 14,
        Protect(l) => (3 << 14) | encodeLoc(l),
    };

    fn toString(): str = match self {
        Attack(l) => "Attack(" + l + ")",
        EndAttack => "EndAttack",
        Protect(l) => "Protect(" + l + ")",
    };
}
// TODO static methods
fn decodeCmd(x: i32): Cmd {
    let tag = x >> 14;
    if tag == 1 {
        Cmd::Attack(decodeLoc(x))
    } else if tag == 2 {
        Cmd::EndAttack
    } else if tag == 3 {
        Cmd::Protect(decodeLoc(x))
    } else {
        // TODO don't require this for type inference
        let cmd: Cmd = null;
        cmd
    }
}
fn pushCmd(cmd: Cmd) throws GameActionException {
    let i = cmdLoc();
    while rc.readSharedArray(i) != 0 {
        i += 1;
    }
    if i >= cmdLoc() + CMD_LEN {
        println("Warning: Too many commands, skipping " + cmd.toString());
        return;
    }
    rc.writeSharedArray(i, cmd.encode());
    rc.writeSharedArray(i+1, 0);
}
let commands: [Cmd] = [];
fn readCmds() throws GameActionException {
    commands.clear();
    let i = cmdLoc();
    loop {
        let cmdi = rc.readSharedArray(i);
        if cmdi == 0 || i > cmdLoc() + CMD_LEN {
            break;
        }
        let cmd = decodeCmd(cmdi);
        if cmd == null {
            println("Warning: Could not decode cmd " + cmdi);
        } else {
            commands.push(cmd);
        }
        i += 1;
    }

    if rc.getType() == RobotType::ARCHON {
        let i = cmdLocOther();
        loop {
            let cmdi = rc.readSharedArray(i);
            if cmdi == 0 || i > cmdLocOther() + CMD_LEN {
                break;
            }
            let cmd = decodeCmd(cmdi);
            if cmd == null {
                println("Warning: Could not decode cmd " + cmdi);
            } else {
                commands.push(cmd);
            }
            i += 1;
        }
    }
}
fn clearCmds() throws GameActionException {
    commands.clear();
    if rc.readSharedArray(cmdLoc()) != 0 {
        rc.writeSharedArray(cmdLoc(), 0);
    }
}

// Just enemy archons, for now
let archons: [MapLocation] = [];
fn readArchons() throws GameActionException {
    let a = rc.readSharedArray(ARCHON_LOC);
    // 4-bit number of enemy archons we know of
    let numArchons = a >> 12;
    if numArchons != archons.len() {
        archons = [];
        for i in 0..numArchons {
            let n = rc.readSharedArray(ARCHON_LOC + i);
            archons.push(decodeLoc(n));
        }
    }
}
fn pushArchon(loc: MapLocation) throws GameActionException {
    rc.setIndicatorLine(rc.getLocation(), loc, 255, 0, 0);

    archons.push(loc);
    let a = rc.readSharedArray(ARCHON_LOC);
    let oldNum = a >> 12;
    // Don't incur the 100 btc cost twice unless we need to
    if oldNum == 0 {
        let a = ((oldNum + 1) << 12) | encodeLoc(loc);
        rc.writeSharedArray(ARCHON_LOC, a);
    } else {
        // Just do the addition on the high bits directly
        a += 1 << 12;
        rc.writeSharedArray(ARCHON_LOC, a);
        rc.writeSharedArray(ARCHON_LOC + oldNum, encodeLoc(loc));
    }
}
fn removeArchon(i: i32) throws GameActionException {
    rc.setIndicatorLine(rc.getLocation(), archons[i], 127, 0, 127);

    // Easy case
    if archons.len() == 1 {
        // TODO we shouldn't need the `let _`
        let _ = archons.pop();
        rc.writeSharedArray(0, 0);
        return;
    }

    // Swap the removed element with the last element so only touch those two
    // (and we don't even have to touch the last element in the shared array)
    let last_loc = archons.pop();
    archons[i] = last_loc;
    if i == 0 {
        rc.writeSharedArray(0, (archons.len() << 12) | encodeLoc(last_loc));
    } else {
        let a = rc.readSharedArray(0);
        a -= 1 << 12;
        rc.writeSharedArray(0, a);
        rc.writeSharedArray(i, encodeLoc(last_loc));
    }
}
fn searchArchons() throws GameActionException {
    fn seenArchon(loc: MapLocation): bool {
        for i in archons {
            if i == loc {
                return true;
            }
        }
        false
    }

    // Find new archons
    for i in nearbyRobotsThem {
        if i.type == RobotType::ARCHON && !seenArchon(i.location) {
            pushArchon(i.location);
        }
    }
    // Remove ones that no longer exist
    let remove: [i32] = [];
    for i in 0..archons.len() {
        if archons[i].isWithinDistanceSquared(rc.getLocation(), rc.getType().visionRadiusSquared) {
            let r = rc.senseRobotAtLocation(archons[i]);
            if r == null || r.type != RobotType::ARCHON {
                remove.push(i);
            }
        }
    }
    for i in remove {
        removeArchon(i);
    }
}