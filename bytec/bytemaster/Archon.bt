extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

// What number archon this is, i.e. how many archons go before it each turn
let archonOrder = 0;
let archonCount = 0;
let START_MINERS: [i32] = [4, 4, 6, 6];

fn preTurn() throws GameActionException {

}

fn spawnMiner() throws GameActionException {
    if lead < RobotType::MINER.buildCostLead {
        return;
    }
    let dir = Miner::findSpawnSpace();
    if dir != null && rc.canBuildRobot(RobotType::MINER, dir) {
        Mem::addMinerCount();
        Mem::addFreeMiners();
        rc.buildRobot(RobotType::MINER, dir);
    }
}

fn spawnBuilder() throws GameActionException {
    if lead < RobotType::BUILDER.buildCostLead {
        return;
    }
    let dir = Builder::findSpawnSpace();
    if dir != null && rc.canBuildRobot(RobotType::BUILDER, dir) {
        Mem::addBuilderCount();
        rc.buildRobot(RobotType::BUILDER, dir);
    }
}

fn spawnSuicideBuilder() throws GameActionException {
    if lead < RobotType::BUILDER.buildCostLead {
        return;
    }
    let best: Direction = null;
    let best_lead = 1000;
    for dir in ALL_MOVE_DIRECTIONS {
        if rc.canBuildRobot(RobotType::BUILDER, dir) {
            let lead = rc.senseLead(rc.getLocation().add(dir));
            if lead < best_lead {
                best = dir;
                best_lead = lead;
            }
        }
    }
    if best != null {
        rc.buildRobot(RobotType::BUILDER, best);
    }
}

fn spawnSoldier() throws GameActionException {
    if lead < RobotType::SOLDIER.buildCostLead {
        return;
    }
    let dir = Combat::findSpawnSpace(RobotType::SOLDIER);
    if dir != null && rc.canBuildRobot(RobotType::SOLDIER, dir) {
        Mem::addSoldierCount();
        rc.buildRobot(RobotType::SOLDIER, dir);
    }
}

fn spawnSage() throws GameActionException {
    let dir = Combat::findSpawnSpace(RobotType::SAGE);
    if dir != null && rc.canBuildRobot(RobotType::SAGE, dir) {
        rc.buildRobot(RobotType::SAGE, dir);
    }
}

enum BuildEntry {
    Laboratory,
    Watchtower,
    StartMiner,
    LateMiner,
    Builder,
    FarmBuilder,
    Soldier;

    // Higher is better
    fn priority(): i32 throws GameActionException {
        match self {
            StartMiner  => if minersSpawned == 0 || (nearbyMiners == 0 && rc.getRoundNum() > 300) { 70 } else { 49 },
            LateMiner   => 45 + nLead - 2 * nearbyMiners,
            // LateMiner   => if nearbyMiners == 0 && rc.getRoundNum() > 300 { 50 } else { 20 },
            Laboratory  => if Mem::getLabCount() == 0 { 51 } else { 30 },
            Builder     => if Mem::getBuilderCount() == 0 { 80 } else { 25 },
            FarmBuilder => 50 - nLead / 2,
            Soldier     => 1,
            Watchtower  => 26,
        }
    }

    fn matches(i: i32): bool {
        match self {
            StartMiner  => false,//i == 70 || i == 49,
            LateMiner   => i > 42 && i < 58,
            // LateMiner   => i == 50 || i == 20,
            Laboratory  => i == 60 || i == 30,
            Builder     => i == 80 || i == 25,
            FarmBuilder => i > 40 && i < 50,
            Soldier     => i == 1,
            Watchtower  => i == 26,
        }
    }

    fn leadNeeded(): i32 {
        match self {
            Laboratory => RobotType::LABORATORY.buildCostLead,
            Watchtower => RobotType::WATCHTOWER.buildCostLead,
            StartMiner => RobotType::MINER.buildCostLead,
            LateMiner => RobotType::MINER.buildCostLead,
            Builder => RobotType::BUILDER.buildCostLead,
            FarmBuilder => RobotType::BUILDER.buildCostLead,
            Soldier => RobotType::SOLDIER.buildCostLead,
        }
    }

    fn queue() throws GameActionException {
        // rc.setIndicatorString("Queued: " + self);
        lastQueued = self.priority();
        rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, self.priority());
        rc.writeSharedArray(Mem::BUILD_QUEUE_LOC + 1, self.leadNeeded());
    }

    fn tryBuildOrQueue(): bool throws GameActionException {
        let canBuildThis = self.leadNeeded() <= rc.getTeamLeadAmount(rc.getTeam());
        let existing = rc.readSharedArray(Mem::BUILD_QUEUE_LOC);
        if existing == 0 {
            rc.setIndicatorString("Was 0: " + self);
            if !canBuildThis { self.queue(); }
            canBuildThis
        // } else if self.matches(existing) && existing == lastQueued && canBuildThis {
        //     rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, 0);
        //     true
        } else if self.priority() > existing {
            rc.setIndicatorString("Higher priority: " + self + " with " + self.priority() + " > " + existing);
            if !canBuildThis { self.queue(); }
            canBuildThis
        } else if self.leadNeeded() <= rc.getTeamLeadAmount(rc.getTeam()) - rc.readSharedArray(Mem::BUILD_QUEUE_LOC+1) {
            rc.setIndicatorString("Enough lead for " + self + ": " + rc.getTeamLeadAmount(rc.getTeam()) + " >= " + self.leadNeeded() + " + " + rc.readSharedArray(Mem::BUILD_QUEUE_LOC+1));
            true
        } else {
            false
        }
    }

    fn tryQueue(): bool throws GameActionException {
        let existing = rc.readSharedArray(Mem::BUILD_QUEUE_LOC);
        if self.priority() >= existing {
            self.queue();
            true
        } else {
            false
        }
    }
}
let lastQueued = 0;

use Micro::Comparison;
let micro = Micro::Micro().init([
    Comparison::EnemyDamage,
    Comparison::Rubble(10),
    Comparison::RepairValue,
    Comparison::Rubble(0),
]);

fn microMove(): bool throws GameActionException {
    micro.startRc(false);
    micro.updateEnemies();
    micro.updateAllies();
    let best = micro.bestLoc();
    let at = rc.getLocation();

    if best.loc != at {
        rc.setIndicatorString("MICRO MOVE: damage: " + best.enemyDamage + ", repair: " + best.repairValue);
        rc.setIndicatorLine(at, best.loc, 0, 0, 255);
        if rc.isMovementReady() {
            rc.move(at.dirTo(best.loc));
        }
        true
    } else {
        rc.setIndicatorString("MICRO STAY: damage: " + best.enemyDamage + ", repair: " + best.repairValue);
        false
    }
}

define MAX_MOBILE_TURNS = 40;
let mobileTurns = 0;
let incomes: [i32] = [; 30];
let incomeIdx = 0;
fn averageIncome(): i32 throws GameActionException {
    let income = Mem::readIncome();
    incomes[incomeIdx] = income;
    incomeIdx = (incomeIdx + 1) % incomes.len();
    let sum = 0;
    for i in incomes {
        sum += i;
    }
    rc.setIndicatorString("Income this turn: " + income + ", average income: " + sum / incomes.len());
    sum / incomes.len()
}

let freeMinerValues: [i32] = [; 30];
let freeMinerIdx = 0;
fn averageFreeMiners(): i32 throws GameActionException {
    let n = Mem::getFreeMiners();
    freeMinerValues[freeMinerIdx] = n;
    freeMinerIdx = (freeMinerIdx + 1) % freeMinerValues.len();
    let sum = 0;
    for i in freeMinerValues {
        sum += i;
    }
    // rc.setIndicatorString("Income this turn: " + income + ", average income: " + sum / incomes.len());
    sum / freeMinerValues.len()
}

let builderTurns = 100;
let lead = 0;
let canMove = true;
let minersSpawned = 0;
let nearbyMiners = 0;
let nLead = 0;
let nextVortex = 0;
fn findVortex() throws GameActionException {
    nextVortex = 0;
    let schedule = rc.getAnomalySchedule();
    for i in schedule {
        if i.anomalyType == AnomalyType::VORTEX && i.roundNumber > rc.getRoundNum() {
            nextVortex = i.roundNumber;
            break;
        }
    }
}
let wasTargetingArchon = false;
fn turn() throws GameActionException {
    if archonCount != rc.getArchonCount() {
        archonCount = rc.getArchonCount();
        archonOrder = rc.readSharedArray(0);
        if archonOrder == rc.getArchonCount() - 1 {
            rc.writeSharedArray(0, 0);
        } else {
            rc.writeSharedArray(0, archonOrder + 1);
        }
        rc.writeSharedArray(Mem::FRIENDLY_ARCHON_LOC + archonOrder, Mem::encodeLoc(rc.getLocation()));
        rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, 0);
        findVortex();
    }

    if archonOrder == 0 {
        Mem::maintainMinerCorners();
        Mem::maintainSoldiers();
        Mem::resetIncome();
        rc.writeSharedArray(37, Mem::getMinerCount());
    }
    Mem::buildInfo.read();

    let minerCount = Mem::getMinerCount();
    let soldierCount = Mem::getSoldierCount();
    let income = averageIncome();
    let freeMiners = averageFreeMiners();
    lead = rc.getTeamLeadAmount(rc.getTeam());

    nearbyMiners = 0;
    for i in Mem::nearbyAllies {
        if i.type == RobotType::MINER {
            nearbyMiners += 1;
        }
    }

    rc.setIndicatorString("Build queue: priority " + rc.readSharedArray(Mem::BUILD_QUEUE_LOC) + "for lead " + rc.readSharedArray(Mem::BUILD_QUEUE_LOC + 1));
    if rc.readSharedArray(Mem::BUILD_QUEUE_LOC) == lastQueued {
        rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, 0);
        lastQueued = 0;
    }
    if Mem::buildInfo.shouldBuildLab && Mem::getLabCount() >= 3 {
        Mem::buildInfo.builtLab();
    }

    let needsBuilder = false;
    builderTurns += 1;
    if //income >= 3
        (Mem::buildInfo.shouldBuildLab && minerCount > 1) || 
            ((Mem::buildInfo.shouldBuildWatchtower || Mem::buildInfo.shouldBuildLab || builderTurns >= 30 || Mem::getLabCount() == 0)
            && minerCount > 3
            && Mem::nearbyEnemies.len() == 0)
    {
        if Mem::getLabCount() == 0 || (income >= 3 * Mem::getLabCount()) && BuildEntry::Laboratory.tryQueue() {
            if rc.readSharedArray(Mem::LAB_CLAIM_LOC) == 0 && builderTurns >= 30 && lead >= RobotType::BUILDER.buildCostLead && Mem::getBuilderCount() < rc.getArchonCount() * 3 {
                builderTurns = 0;
                needsBuilder = true;
            }
            Mem::buildInfo.queueLab();
        } else if income >= 8 && BuildEntry::Watchtower.tryQueue() {
            if builderTurns >= 30 && lead >= RobotType::BUILDER.buildCostLead && Mem::getBuilderCount() < rc.getArchonCount() * 3 {
                builderTurns = 0;
                needsBuilder = true;
            }
            Mem::buildInfo.queueWatchtower();
        }
    } else if income <= 3 && (Mem::buildInfo.shouldBuildWatchtower || (Mem::buildInfo.shouldBuildLab && Mem::getLabCount() > 0)) {
        Mem::buildInfo.builtWatchtower();
        Mem::buildInfo.builtLab();
    }

    // Not exact, just a heuristic for when we're in danger
    let enemyDamage = 0;
    for i in Mem::nearbyEnemies {
        if i.type.damage > 0 && i.location.isWithinDistanceSquared(rc.getLocation(), i.type.actionRadiusSquared) {
            enemyDamage += i.type.damage;
        }
    }

    nLead = rc.senseNearbyLocationsWithLead(rc.getType().visionRadiusSquared, 1).len();

    if rc.getMode() == RobotMode::PORTABLE || !rc.isActionReady() {
        // let targetMinerCount = 8 + (rc.getMapWidth() + rc.getMapHeight())/10;
        let targetFreeMiners = max(1, minerCount / 3);
        // let freeMinerPercent = Mem::getFreeMiners() * 100  / minerCount;
        let startMinerCount = START_MINERS[archonCount - 1];
        if enemyDamage > 1 && rc.isActionReady() && rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold && (rc.getRoundNum() % rc.getArchonCount() == archonOrder
            || rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold * (rc.getArchonCount() - archonOrder)) {
        } else if freeMiners < targetFreeMiners && BuildEntry::LateMiner.tryQueue() {
        } else if needsBuilder && Mem::getBuilderCount() < minerCount && BuildEntry::Builder.tryQueue() {
        } else if (nLead < 20 && rc.getRoundNum() > 300) && Mem::nearbyEnemies.len() < min(3, Mem::nearbyAllies.len()) && BuildEntry::FarmBuilder.tryQueue() {}
    } else {
        // let targetMinerCount = 8 + (rc.getMapWidth() + rc.getMapHeight())/10;
        let targetFreeMiners = max(1, minerCount / 3);
        // let freeMinerPercent = Mem::getFreeMiners() * 100  / minerCount;
        let startMinerCount = START_MINERS[archonCount - 1];
        if enemyDamage > 1 && rc.isActionReady() && rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold && (rc.getRoundNum() % rc.getArchonCount() == archonOrder
            || rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold * (rc.getArchonCount() - archonOrder)) {
            spawnSage();
        // } else if minerCount < startMinerCount && BuildEntry::StartMiner.tryBuildOrQueue() {
        //     minersSpawned += 1;
        //     spawnMiner();
        } else if freeMiners < targetFreeMiners && BuildEntry::LateMiner.tryBuildOrQueue() {
            minersSpawned += 1;
            spawnMiner();
        } else if needsBuilder && Mem::getBuilderCount() < minerCount && BuildEntry::Builder.tryBuildOrQueue() {
            spawnBuilder();
        } else if (nLead < 20 && rc.getRoundNum() > 300) && Mem::nearbyEnemies.len() < min(3, Mem::nearbyAllies.len()) && BuildEntry::FarmBuilder.tryBuildOrQueue() {
            Mem::buildInfo.queueLeadFarming();
            spawnSuicideBuilder();
        // All archons basically make sages as fast as possible, so we assume that later archons will build sages and make them take turns
        // This is not always true, but it's a pretty good estimate
        } else if rc.isActionReady() && rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold && (rc.getRoundNum() % rc.getArchonCount() == archonOrder
            || rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold * (rc.getArchonCount() - archonOrder)) {
            spawnSage();
        } else if rc.getRoundNum() % rc.getArchonCount() == archonOrder && BuildEntry::Soldier.tryBuildOrQueue() {
            spawnSoldier();
        }
    }

    if rc.getMode() == RobotMode::PORTABLE {
        // Move to low rubble
        mobileTurns += 1;
        let shouldBuild = rc.getTeamLeadAmount(rc.getTeam()) > 200 || rc.getTeamGoldAmount(rc.getTeam()) > 25;
        if (shouldBuild || Mem::nearbyEnemies.len() > 2 || mobileTurns >= MAX_MOBILE_TURNS) && (mobileTurns > 80 || !microMove()) && rc.canTransform() && rc.senseRubble(rc.getLocation()) <= 20 {
            rc.transform();
            rc.writeSharedArray(Mem::FRIENDLY_ARCHON_LOC + archonOrder, Mem::encodeLoc(rc.getLocation()));
            canMove = true;
            findVortex();
        } else {
            let loc = rc.getLocation();
            let closestSoldier = Mem::getClosestSoldier(loc);
            if closestSoldier != null { //&& !rc.canSenseLocation(closestSoldier) {
                Paths::target = closestSoldier;
                Paths::targetMove(true);
            } else if Mem::enemyArchons.len() > 0 {
                let closest: MapLocation = null;
                let closest_d = 100000;
                for i in Mem::enemyArchons {
                    let d = i.distanceSquaredTo(rc.getLocation());
                    if d < closest_d {
                        closest = i;
                        closest_d = d;
                    }
                }
                if closest != null {
                    Paths::target = closest;
                    Paths::targetMove(false);
                    wasTargetingArchon = true;
                }
            } else if wasTargetingArchon {
                wasTargetingArchon = false;
                Paths::target = null;
            }
            Paths::targetMove(true);
        }
    } else {
        mobileTurns = 0;

        if canMove && rc.canTransform() && minersSpawned >= 2 && (Mem::getBuilderCount() > 0 || Mem::getLabCount() > 0) && rc.senseRubble(rc.getLocation()) > 0 {
            let rubble = rc.senseRubble(rc.getLocation());
            let found = false;
            for i in -5..6 {
                for j in unroll -5..6 {
                    let loc = rc.getLocation().translate(i, j);
                    if rc.canSenseLocation(loc) && rc.senseRubble(loc) < rubble {
                        found = true;
                    }
                }
                if found { break; }
            }
            if found {
                rc.transform();
            } else {
                canMove = false;
            }
        }
        if rc.canTransform() && rc.getRoundNum() < nextVortex && rc.getRoundNum() > nextVortex - 3 {
            println("Preparing for vortex");
            rc.transform();
        }

        // Normal archon things
        if rc.isActionReady() {
            // Try to repair a robot in range.
            // The targeting logic picks the most important and vulnerable unit,
            // so it works pretty well in this case too!
            let bestUnit: RobotInfo = null;
            let bestV = 0;
            let heal = rc.getType().getHealing(rc.getLevel());
            for i in Mem::nearbyAllies {
                if i.health < i.type.health && rc.canRepair(i.location) {
                    let v = Micro::repairValue(heal, i);
                    if v > bestV {
                        bestUnit = i;
                        bestV = v;
                    }
                }
            }
            if bestUnit != null {
                rc.repair(bestUnit.location);
            }
        }

        if rc.canTransform() && ((Mem::getLabCount() > 0 && minerCount >= 4 && Mem::nearbyEnemies.len() == 0) || (minersSpawned > 0 && enemyDamage > 0 && Mem::nearbyEnemies.len() > Mem::nearbyAllies.len())) {
            rc.transform();
        }
    }

    let spent = lead - rc.getTeamLeadAmount(rc.getTeam());
    if spent > 0 {
        Mem::spend(spent);
    }
    if archonOrder == archonCount - 1 {
        let diff = Mem::getMinerCount() - rc.readSharedArray(37);
        Mem::clearMinerCount();
        Mem::clearFreeMiners();
        for i in 0..diff {
            Mem::addMinerCount();
        }
        Mem::clearSoldierCount();
        Mem::clearLabCount();
        Mem::clearBuilderCount();
        rc.writeSharedArray(Mem::LAB_CLAIM_LOC, 0);
        let freeLead = rc.getTeamLeadAmount(rc.getTeam());
        if minerCount < START_MINERS[archonCount - 1] && BuildEntry::StartMiner.matches(rc.readSharedArray(Mem::BUILD_QUEUE_LOC)) {
            freeLead -= min(freeLead, RobotType::MINER.buildCostLead);
        }
        rc.writeSharedArray(Mem::FREE_LEAD_LOC, freeLead);
    }
    Mem::buildInfo.writeBack();
}