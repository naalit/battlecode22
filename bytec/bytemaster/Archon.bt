extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

// What number archon this is, i.e. how many archons go before it each turn
let archonOrder = 0;
let archonCount = 0;
let START_MINERS: [i32] = [3, 5, 6, 7];

fn preTurn() throws GameActionException {

}

fn spawnMiner() throws GameActionException {
    if lead < RobotType::MINER.buildCostLead {
        return;
    }
    let dir = Miner::findSpawnSpace();
    if dir != null && rc.canBuildRobot(RobotType::MINER, dir) {
        Mem::addMinerCount();
        rc.buildRobot(RobotType::MINER, dir);
    }
}

fn spawnBuilder() throws GameActionException {
    if lead < RobotType::BUILDER.buildCostLead {
        return;
    }
    let dir = Builder::findSpawnSpace();
    if dir != null && rc.canBuildRobot(RobotType::BUILDER, dir) {
        Mem::addMinerCount();
        rc.buildRobot(RobotType::BUILDER, dir);
    }
}

fn spawnSuicideBuilder() throws GameActionException {
    if lead < RobotType::BUILDER.buildCostLead {
        return;
    }
    let best: Direction = null;
    let best_lead = 1000;
    for dir in ALL_MOVE_DIRECTIONS {
        if rc.canBuildRobot(RobotType::BUILDER, dir) {
            let lead = rc.senseLead(rc.getLocation().add(dir));
            if lead < best_lead {
                best = dir;
                best_lead = lead;
            }
        }
    }
    if best != null {
        rc.buildRobot(RobotType::BUILDER, best);
    }
}

fn spawnSoldier() throws GameActionException {
    if lead < RobotType::SOLDIER.buildCostLead {
        return;
    }
    let dir = Combat::findSpawnSpace(RobotType::SOLDIER);
    if dir != null && rc.canBuildRobot(RobotType::SOLDIER, dir) {
        Mem::addSoldierCount();
        rc.buildRobot(RobotType::SOLDIER, dir);
    }
}

fn spawnSage() throws GameActionException {
    let dir = Combat::findSpawnSpace(RobotType::SAGE);
    if dir != null && rc.canBuildRobot(RobotType::SAGE, dir) {
        rc.buildRobot(RobotType::SAGE, dir);
    }
}

let incomes: [i32] = [; 10];
let incomeIdx = 0;
fn averageIncome(): i32 throws GameActionException {
    let income = Mem::readIncome();
    incomes[incomeIdx] = income;
    incomeIdx = (incomeIdx + 1) % incomes.len();
    let sum = 0;
    for i in incomes {
        sum += i;
    }
    sum / incomes.len()
}
let builderTurns = 0;
let lead = 0;
fn turn() throws GameActionException {
    if archonCount != rc.getArchonCount() {
        archonCount = rc.getArchonCount();
        archonOrder = rc.readSharedArray(0);
        if archonOrder == rc.getArchonCount() - 1 {
            rc.writeSharedArray(0, 0);
        } else {
            rc.writeSharedArray(0, archonOrder + 1);
        }
        rc.writeSharedArray(Mem::FRIENDLY_ARCHON_LOC + archonOrder, Mem::encodeLoc(rc.getLocation()));
    }

    if rc.getRoundNum() == 1 {
        spawnMiner();
    } else {
        if archonOrder == 0 {
            Mem::maintainMinerCorners();
            Mem::maintainSoldiers();
            Mem::resetIncome();
        }
        Mem::buildInfo.read();

        let minerCount = Mem::getMinerCount();
        let soldierCount = Mem::getSoldierCount();
        let income = averageIncome();
        lead = rc.getTeamLeadAmount(rc.getTeam());

        let needsBuilder = false;
        builderTurns += 1;
        if income >= 30
            && (Mem::buildInfo.shouldBuildWatchtower || Mem::buildInfo.shouldBuildLab || builderTurns >= 30)
            && minerCount > 3
            && Mem::nearbyEnemies.len() == 0
        {
            if Mem::getLabCount() == 0 {
                if builderTurns >= 30 && lead >= RobotType::BUILDER.buildCostLead {
                    builderTurns = 0;
                    needsBuilder = true;
                } else {
                    lead -= RobotType::LABORATORY.buildCostLead;
                }
                Mem::buildInfo.queueLab();
            } else {
                if builderTurns >= 30 && lead >= RobotType::BUILDER.buildCostLead {
                    builderTurns = 0;
                    needsBuilder = true;
                } else {
                    lead -= RobotType::WATCHTOWER.buildCostLead;
                }
                Mem::buildInfo.queueWatchtower();
            }
        } else if income <= 10 && (Mem::buildInfo.shouldBuildWatchtower || Mem::buildInfo.shouldBuildLab) {
            Mem::buildInfo.builtWatchtower();
            Mem::buildInfo.builtLab();
        }

        // Don't let one Archon dominate
        // They take turns spawning, or they can override the order if there's enough for each other archon to spawn a soldier to defend itself
        if rc.getRoundNum() % rc.getArchonCount() == archonOrder
            || lead >= RobotType::MINER.buildCostLead * (rc.getArchonCount() - archonOrder) {
            let nLead = rc.senseNearbyLocationsWithLead(rc.getType().visionRadiusSquared, 1).len();
            let targetMinerCount = 6 + (rc.getMapWidth() + rc.getMapHeight())/10;
            let startMinerCount = START_MINERS[archonCount - 1];
            if needsBuilder {
                rc.setIndicatorString("NORMAL BUILDER");
                spawnBuilder();
            } else if minerCount < targetMinerCount && (minerCount < startMinerCount || minerCount < soldierCount) {
                spawnMiner();
            } else if ((nLead < 10 && rc.getRoundNum() < 100) || rc.getHealth() <= 400) && Mem::nearbyEnemies.len() == 0 {
                // This builder will suicide after possibly healing the archon
                rc.setIndicatorString("SUICIDE BUILDER");
                spawnSuicideBuilder();
            } else if rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold {
                spawnSage();
            } else {
                spawnSoldier();
            }
        }

        if rc.isActionReady() {
            // Try to repair a robot in range.
            // The targeting logic picks the most important and vulnerable unit,
            // so it works pretty well in this case too!
            let bestUnit: RobotInfo = null;
            Combat::at = rc.getLocation();
            for i in Mem::nearbyAllies {
                if i.health < i.type.health && rc.canRepair(i.location) {
                    if Combat::unitBetter(bestUnit, i) {
                        bestUnit = i;
                    }
                }
            }
            if bestUnit != null {
                rc.repair(bestUnit.location);
            }
        }

        let spent = lead - rc.getTeamLeadAmount(rc.getTeam());
        if spent > 0 {
            Mem::spend(spent);
        }
        if archonOrder == archonCount - 1 {
            Mem::clearMinerCount();
            Mem::clearSoldierCount();
            Mem::clearLabCount();
        }
        Mem::buildInfo.writeBack();
    }
}