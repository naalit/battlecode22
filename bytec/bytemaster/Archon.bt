extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

// What number archon this is, i.e. how many archons go before it each turn
let archonOrder = 0;
let archonCount = 0;
let START_MINERS: [i32] = [3, 4, 6, 7];

fn preTurn() throws GameActionException {

}

fn spawnMiner() throws GameActionException {
    if lead < RobotType::MINER.buildCostLead {
        return;
    }
    let dir = Miner::findSpawnSpace();
    if dir != null && rc.canBuildRobot(RobotType::MINER, dir) {
        Mem::addMinerCount();
        rc.buildRobot(RobotType::MINER, dir);
    }
}

fn spawnBuilder() throws GameActionException {
    if lead < RobotType::BUILDER.buildCostLead {
        return;
    }
    let dir = Builder::findSpawnSpace();
    if dir != null && rc.canBuildRobot(RobotType::BUILDER, dir) {
        Mem::addBuilderCount();
        rc.buildRobot(RobotType::BUILDER, dir);
    }
}

fn spawnSuicideBuilder() throws GameActionException {
    if lead < RobotType::BUILDER.buildCostLead {
        return;
    }
    let best: Direction = null;
    let best_lead = 1000;
    for dir in ALL_MOVE_DIRECTIONS {
        if rc.canBuildRobot(RobotType::BUILDER, dir) {
            let lead = rc.senseLead(rc.getLocation().add(dir));
            if lead < best_lead {
                best = dir;
                best_lead = lead;
            }
        }
    }
    if best != null {
        rc.buildRobot(RobotType::BUILDER, best);
    }
}

fn spawnSoldier() throws GameActionException {
    if lead < RobotType::SOLDIER.buildCostLead {
        return;
    }
    let dir = Combat::findSpawnSpace(RobotType::SOLDIER);
    if dir != null && rc.canBuildRobot(RobotType::SOLDIER, dir) {
        Mem::addSoldierCount();
        rc.buildRobot(RobotType::SOLDIER, dir);
    }
}

fn spawnSage() throws GameActionException {
    let dir = Combat::findSpawnSpace(RobotType::SAGE);
    if dir != null && rc.canBuildRobot(RobotType::SAGE, dir) {
        rc.buildRobot(RobotType::SAGE, dir);
    }
}

enum BuildEntry {
    Laboratory,
    Watchtower,
    StartMiner,
    LateMiner,
    Builder,
    FarmBuilder,
    Soldier;

    // Higher is better
    fn priority(): i32 throws GameActionException {
        match self {
            StartMiner  => if minersSpawned == 0 || (!nearbyMiner && rc.getRoundNum() > 300) { 70 } else { 40 },
            LateMiner   => if !nearbyMiner && rc.getRoundNum() > 300 { 50 } else { 20 },
            Laboratory  => if Mem::getLabCount() == 0 { 60 } else { 30 },
            Builder     => if Mem::getBuilderCount() == 0 { 80 } else { 25 },
            FarmBuilder => 50 - nLead / 2,
            Soldier     => 1,
            Watchtower  => 10,
        }
    }

    fn matches(i: i32): bool {
        match self {
            StartMiner  => i == 70 || i == 40,
            LateMiner   => i == 50 || i == 20,
            Laboratory  => i == 60 || i == 30,
            Builder     => i == 80 || i == 25,
            FarmBuilder => i > 40 && i < 50,
            Soldier     => i == 1,
            Watchtower  => i == 10,
        }
    }

    fn leadNeeded(): i32 {
        match self {
            Laboratory => RobotType::LABORATORY.buildCostLead,
            Watchtower => RobotType::WATCHTOWER.buildCostLead,
            StartMiner => RobotType::MINER.buildCostLead,
            LateMiner => RobotType::MINER.buildCostLead,
            Builder => RobotType::BUILDER.buildCostLead,
            FarmBuilder => RobotType::BUILDER.buildCostLead,
            Soldier => RobotType::SOLDIER.buildCostLead,
        }
    }

    fn queue() throws GameActionException {
        rc.setIndicatorString("Queued: " + self);
        lastQueued = self.priority();
        rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, self.priority());
        rc.writeSharedArray(Mem::BUILD_QUEUE_LOC + 1, self.leadNeeded());
    }

    fn tryBuildOrQueue(): bool throws GameActionException {
        let canBuildThis = self.leadNeeded() <= rc.getTeamLeadAmount(rc.getTeam());
        let existing = rc.readSharedArray(Mem::BUILD_QUEUE_LOC);
        if existing == 0 {
            if !canBuildThis { self.queue(); }
            canBuildThis
        } else if self.matches(existing) && existing == lastQueued && canBuildThis {
            rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, 0);
            true
        } else if self.priority() > existing {
            if !canBuildThis { self.queue(); }
            canBuildThis
        } else if self.leadNeeded() <= rc.getTeamLeadAmount(rc.getTeam()) - rc.readSharedArray(Mem::BUILD_QUEUE_LOC+1) {//existing.leadNeeded() {
            true
        } else {
            false
        }
    }

    fn tryQueue(): bool throws GameActionException {
        let existing = rc.readSharedArray(Mem::BUILD_QUEUE_LOC);
        if self.priority() >= existing {
            self.queue();
            true
        } else {
            false
        }
    }
}
let lastQueued = 0;

let incomes: [i32] = [; 10];
let incomeIdx = 0;
fn averageIncome(): i32 throws GameActionException {
    let income = Mem::readIncome();
    incomes[incomeIdx] = income;
    incomeIdx = (incomeIdx + 1) % incomes.len();
    let sum = 0;
    for i in incomes {
        sum += i;
    }
    rc.setIndicatorString("Income this turn: " + income + ", average income: " + sum / incomes.len());
    sum / incomes.len()
}
let builderTurns = 100;
let lead = 0;
let canMove = true;
let minersSpawned = 0;
let nearbyMiner = false;
let nLead = 0;
fn turn() throws GameActionException {
    if archonCount != rc.getArchonCount() {
        archonCount = rc.getArchonCount();
        archonOrder = rc.readSharedArray(0);
        if archonOrder == rc.getArchonCount() - 1 {
            rc.writeSharedArray(0, 0);
        } else {
            rc.writeSharedArray(0, archonOrder + 1);
        }
        rc.writeSharedArray(Mem::FRIENDLY_ARCHON_LOC + archonOrder, Mem::encodeLoc(rc.getLocation()));
        rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, 0);
    }

    if archonOrder == 0 {
        Mem::maintainMinerCorners();
        Mem::maintainSoldiers();
        Mem::resetIncome();
        rc.writeSharedArray(37, Mem::getMinerCount());
    }
    Mem::buildInfo.read();

    let minerCount = Mem::getMinerCount();
    let soldierCount = Mem::getSoldierCount();
    let income = averageIncome();
    lead = rc.getTeamLeadAmount(rc.getTeam());

    nearbyMiner = false;
    for i in Mem::nearbyAllies {
        if i.type == RobotType::MINER {
            nearbyMiner = true;
            break;
        }
    }

    if rc.getMode() == RobotMode::PORTABLE {
        // Move to low rubble
        if Paths::archonMove() {
            rc.transform();
            rc.writeSharedArray(Mem::FRIENDLY_ARCHON_LOC + archonOrder, Mem::encodeLoc(rc.getLocation()));
            canMove = true;
        }
    } else {
        if canMove && rc.canTransform() && minersSpawned >= 2 && (Mem::getBuilderCount() > 0 || Mem::getLabCount() > 0) && rc.senseRubble(rc.getLocation()) > 0 {
            let rubble = rc.senseRubble(rc.getLocation());
            let found = false;
            for i in -5..6 {
                for j in unroll -5..6 {
                    let loc = rc.getLocation().translate(i, j);
                    if rc.canSenseLocation(loc) && rc.senseRubble(loc) < rubble {
                        found = true;
                    }
                }
                if found { break; }
            }
            if found {
                rc.transform();
            } else {
                canMove = false;
            }
        }

        // Normal archon things
        rc.setIndicatorString("Build queue: priority " + rc.readSharedArray(Mem::BUILD_QUEUE_LOC) + "for lead " + rc.readSharedArray(Mem::BUILD_QUEUE_LOC + 1));
        if rc.readSharedArray(Mem::BUILD_QUEUE_LOC) == lastQueued {
            rc.writeSharedArray(Mem::BUILD_QUEUE_LOC, 0);
            lastQueued = 0;
        }
        if Mem::buildInfo.shouldBuildLab && Mem::getLabCount() >= 3 {
            Mem::buildInfo.builtLab();
        }

        let needsBuilder = false;
        builderTurns += 1;
        if //income >= 3
            (Mem::buildInfo.shouldBuildWatchtower || Mem::buildInfo.shouldBuildLab || builderTurns >= 30)
            && minerCount > 3
            && Mem::nearbyEnemies.len() == 0
        {
            if Mem::getLabCount() == 0 || (income >= 8 && Mem::getLabCount() < 3) && BuildEntry::Laboratory.tryQueue() {
                if builderTurns >= 30 && lead >= RobotType::BUILDER.buildCostLead && Mem::getBuilderCount() < rc.getArchonCount() * 3 {
                    builderTurns = 0;
                    needsBuilder = true;
                }
                Mem::buildInfo.queueLab();
            } else if income >= 8 && BuildEntry::Watchtower.tryQueue() {
                if builderTurns >= 30 && lead >= RobotType::BUILDER.buildCostLead && Mem::getBuilderCount() < rc.getArchonCount() * 3 {
                    builderTurns = 0;
                    needsBuilder = true;
                }
                Mem::buildInfo.queueWatchtower();
            }
        } else if income <= 3 && (Mem::buildInfo.shouldBuildWatchtower || (Mem::buildInfo.shouldBuildLab && Mem::getLabCount() > 0)) {
            Mem::buildInfo.builtWatchtower();
            Mem::buildInfo.builtLab();
        }

        // Don't let one Archon dominate
        // They take turns spawning, or they can override the order if there's enough for each other archon to spawn a soldier to defend itself
        nLead = rc.senseNearbyLocationsWithLead(rc.getType().visionRadiusSquared, 1).len();
        if rc.isActionReady() {
            let targetMinerCount = 6 + (rc.getMapWidth() + rc.getMapHeight())/20;
            let startMinerCount = START_MINERS[archonCount - 1];
            if minerCount < startMinerCount && BuildEntry::StartMiner.tryBuildOrQueue() {
                minersSpawned += 1;
                spawnMiner();
            } else if (minerCount < targetMinerCount || (!nearbyMiner && rc.getRoundNum() > 300)) && BuildEntry::LateMiner.tryBuildOrQueue() {
                spawnMiner();
            } else if needsBuilder && Mem::getBuilderCount() < minerCount && BuildEntry::Builder.tryBuildOrQueue() {
                spawnBuilder();
            } else if nLead < 20 && rc.getRoundNum() > 300 && Mem::nearbyEnemies.len() < min(3, Mem::nearbyAllies.len()) && BuildEntry::FarmBuilder.tryBuildOrQueue() {
                Mem::buildInfo.queueLeadFarming();
                spawnSuicideBuilder();
            // All archons basically make sages as fast as possible, so we assume that later archons will build sages and make them take turns
            // This is not always true, but it's a pretty good estimate
            } else if rc.isActionReady() && rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold && (rc.getRoundNum() % rc.getArchonCount() == archonOrder
                || rc.getTeamGoldAmount(rc.getTeam()) >= RobotType::SAGE.buildCostGold * (rc.getArchonCount() - archonOrder)) {
                spawnSage();
            } else if rc.getRoundNum() % rc.getArchonCount() == archonOrder && BuildEntry::Soldier.tryBuildOrQueue() {
                spawnSoldier();
            }
        }

        if rc.isActionReady() {
            // Try to repair a robot in range.
            // The targeting logic picks the most important and vulnerable unit,
            // so it works pretty well in this case too!
            let bestUnit: RobotInfo = null;
            let bestV = 0;
            Combat::at = rc.getLocation();
            let heal = rc.getType().getHealing(rc.getLevel());
            for i in Mem::nearbyAllies {
                if i.health < i.type.health && rc.canRepair(i.location) {
                    let v = Combat::repairValue(heal, i);
                    if v > bestV {
                        bestUnit = i;
                        bestV = v;
                    }
                }
            }
            if bestUnit != null {
                rc.repair(bestUnit.location);
            }
        }
    }

    let spent = lead - rc.getTeamLeadAmount(rc.getTeam());
    if spent > 0 {
        Mem::spend(spent);
    }
    if archonOrder == archonCount - 1 {
        let diff = Mem::getMinerCount() - rc.readSharedArray(37);
        Mem::clearMinerCount();
        for i in 0..diff {
            Mem::addMinerCount();
        }
        Mem::clearSoldierCount();
        Mem::clearLabCount();
        Mem::clearBuilderCount();
    }
    Mem::buildInfo.writeBack();
}