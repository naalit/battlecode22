extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;
use Micro::Comparison;

let micro = Micro::Micro().init([
    Comparison::EnemyDamage,
    Comparison::Rubble(20),
    Comparison::RepairValue,
    Comparison::Rubble(0),
]);

fn preTurn() throws GameActionException {

}

fn findSpawnSpace(): Direction throws GameActionException {
    micro.startSpawn(RobotType::BUILDER);
    micro.updateEnemies();
    micro.updateAllies();
    let best = micro.bestLoc();

    if best != null {
        rc.getLocation().dirTo(best.loc)
    } else {
        let n: Direction = null;
        n
    }
}

let towerUpgrade: RobotInfo = null;
let bestRepair: RobotInfo = null;
fn microMove(): bool throws GameActionException {
    micro.startRc(false);
    micro.updateEnemies();
    micro.updateAllies();
    let best = micro.bestLoc();
    let at = rc.getLocation();

    if rc.isMovementReady() {
        if best != null && (Mem::nearbyEnemies.len() > 0 || best.repairValue > 0) {
            if best.loc != at {
                rc.setIndicatorString("MICRO MOVE: damage: " + best.enemyDamage + ", repair?: " + (best.repairTarget != null) + " v " + best.repairValue);
                rc.setIndicatorLine(at, best.loc, 0, 0, 255);
                rc.move(at.dirTo(best.loc));
            } else {
                rc.setIndicatorString("MICRO STAY: damage: " + best.enemyDamage + ", repair?: " + (best.repairTarget != null) + " v " + best.repairValue);
            }
            bestRepair = best.repairTarget;
            towerUpgrade = best.upgradeTarget;
            true
        } else {
            rc.setIndicatorString("NO MICRO: damage: " + micro.cloc.enemyDamage + ", repair?: " + (micro.cloc.repairTarget != null) + " v " + micro.cloc.repairValue);
            bestRepair = micro.cloc.repairTarget;
            towerUpgrade = micro.cloc.upgradeTarget;
            false
        }
    } else {
        bestRepair = micro.cloc.repairTarget;
        towerUpgrade = micro.cloc.upgradeTarget;
        false
    }
}

fn turn() throws GameActionException {
    Mem::buildInfo.read();
    Mem::addBuilderCount();

    let loc = rc.getLocation();

    let canMove = !microMove();
    if bestRepair != null {
        if rc.canRepair(bestRepair.location) {
            rc.repair(bestRepair.location);
        }
    }

    if Mem::closestArchon != null && rc.canSenseLocation(Mem::closestArchon) {
        let robot = rc.senseRobotAtLocation(Mem::closestArchon);
        if robot != null && robot.health < robot.type.getMaxHealth(robot.level) {
            if rc.isMovementReady() && !robot.location.isWithinDistanceSquared(loc, RobotType::BUILDER.actionRadiusSquared) {
                Paths::target = robot.location;
                Paths::targetMove(false);
                return;
            }
        }
        if robot != null && robot.level == 1 && rc.canMutate(robot.location) {
            rc.mutate(robot.location);
            Mem::spend(RobotType::ARCHON.getLeadMutateCost(2));
        }
    }

    let cornerX = if loc.x <= rc.getMapWidth() / 2 { 0 } else { rc.getMapWidth() - 1 };
    let cornerY = if loc.y <= rc.getMapHeight() / 2 { 0 } else { rc.getMapHeight() - 1 };
    let corner = MapLocation(cornerX, cornerY);

    if bestRepair == null {
        if Mem::buildInfo.shouldBuildLab && Mem::nearbyEnemies.len() < 3 {
            let nearbyAllies = Mem::nearbyAllies.len();
            if (Mem::nearbyAllies.len() < 15 || corner.isAdjacentTo(loc)) {
                let best: Direction = null;
                let bestRubble = 10000;
                for dir in ALL_MOVE_DIRECTIONS {
                    if rc.canBuildRobot(RobotType::LABORATORY, dir) {
                        let rubble = rc.senseRubble(loc.add(dir));
                        if rubble < bestRubble {
                            bestRubble = rubble;
                            best = dir;
                        }
                    }
                }
                if best != null && bestRubble < 20 {
                    rc.buildRobot(RobotType::LABORATORY, best);
                    Mem::buildInfo.builtLab();
                    Mem::spend(RobotType::LABORATORY.buildCostLead);
                    Mem::addLabCount();
                } else if rc.senseRubble(rc.getLocation()) < 20 && rc.readSharedArray(Mem::LAB_CLAIM_LOC) == 0 {
                    rc.setIndicatorString("Waiting to build lab");
                    rc.writeSharedArray(Mem::LAB_CLAIM_LOC, 1);
                    return;
                }
            }
        } else if towerUpgrade != null && towerUpgrade.type == RobotType::LABORATORY && rc.getTeamLeadAmount(rc.getTeam()) >= RobotType::LABORATORY.buildCostLead && rc.canMutate(towerUpgrade.location) {
            rc.mutate(towerUpgrade.location);
            Mem::spend(towerUpgrade.type.getLeadMutateCost(towerUpgrade.level + 1));
            Mem::buildInfo.upgradedLab();
        } else if bytecodeLeft() > 3000 && micro.existsDamage && Mem::buildInfo.shouldBuildWatchtower && rc.getTeamLeadAmount(rc.getTeam()) >= RobotType::WATCHTOWER.buildCostLead {
            if towerUpgrade != null && rc.canMutate(towerUpgrade.location) {
                rc.mutate(towerUpgrade.location);
                Mem::spend(towerUpgrade.type.getLeadMutateCost(towerUpgrade.level + 1));
                if towerUpgrade.type == RobotType::LABORATORY {
                    Mem::buildInfo.upgradedLab();
                }
            } else {
                let dir = Combat::findSpawnSpace(RobotType::WATCHTOWER);
                if dir != null {
                    let spot = rc.getLocation().add(dir);
                    if rc.senseRubble(spot) < 40 && rc.canBuildRobot(RobotType::WATCHTOWER, dir) {
                        rc.buildRobot(RobotType::WATCHTOWER, dir);
                        Mem::buildInfo.builtWatchtower();
                        Mem::spend(RobotType::WATCHTOWER.buildCostLead);
                    }
                }
            }
        }

        if Mem::buildInfo.shouldFarmLead && Mem::closestArchon != null && loc.isWithinDistanceSquared(Mem::closestArchon, 20) {
            rc.setIndicatorString("SUICIDE MODE");
            // Sacrifice itself
            if rc.senseLead(loc) == 0 {
                Mem::buildInfo.farmedLead();
                Mem::buildInfo.writeBack();
                rc.disintegrate();
            } else {
                for dir in ALL_MOVE_DIRECTIONS {
                    let l = loc.add(dir);
                    if Mem::closestArchon.isWithinDistanceSquared(l, 13) && rc.canMove(dir) && rc.senseLead(l) == 0 {
                        rc.move(dir);
                        return;
                    }
                }
            }
        }
    }

    if canMove {
        if !Mem::buildInfo.shouldBuildLab && Mem::buildInfo.shouldBuildWatchtower {
            let closestSoldier = Mem::getClosestSoldier(rc.getLocation());
            if closestSoldier != null {
                Paths::target = closestSoldier;
            } else if Mem::enemyArchons.len() > 0 {
                let closest: MapLocation = null;
                let closest_d = 100000;
                for i in Mem::enemyArchons {
                    let d = i.distanceSquaredTo(rc.getLocation());
                    if d < closest_d {
                        closest = i;
                        closest_d = d;
                    }
                }
                if closest != null {
                    Paths::target = closest;
                }
            }
        } else if Mem::buildInfo.shouldBuildLab && rc.readSharedArray(Mem::LAB_CLAIM_LOC) == 0 {
            if rc.getID() % 2 == 0 {
                if !rc.canSenseLocation(corner) || rc.senseRubble(corner) <= 20 {
                    Paths::target = corner.add(corner.dirTo(loc));
                    Paths::targetMove(false);
                }
            }
        }
        Paths::targetMove(true);
    }

    Mem::buildInfo.writeBack();
}