extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

let RETREAT_HEALTH = 15;
let KILL_VALUE = 20;
let at: MapLocation;
let actionRadius: i32;
let nearbyFriendlyHP: i32;
let nearbyEnemyHP: i32;
let nearbyFriendlyDamage: i32;
let archonInRange = false;
let selfDamage = 0;
let selfHealth = 0;
let canAttack = false;
let isSage = false;

class LocInfo {
    let loc: MapLocation;
    let enemyDamage: i32;
    let rubble: i32;
    let bestEnemy: RobotInfo;
    let distToEnemy: i32;
    let archonDist: i32;
    let chargeHP: i32;
    let furyHP: i32;

    fn init(loc: MapLocation) throws GameActionException {
        self.loc = loc;
        self.rubble = rc.senseRubble(loc);
        self.enemyDamage = 0;
        self.distToEnemy = 100000;
        self.chargeHP = 0;
        self.furyHP = 0;
        if Mem::closestArchon != null {
            self.archonDist = Mem::closestArchon.distanceSquaredTo(loc);
        }
    }
}
fn unitBetter(old: RobotInfo, new: RobotInfo): bool {
    // Targeting priority:
    fn inline priority(ty: RobotType): i32 = match ty {
        // Sages are valuable and dangerous, kill on sight
        SAGE => 7,
        // The most immediate threat, if we don't kill them they'll kill us
        SOLDIER => 6,
        // We'll need to kill these to take out a watchtower
        // probably should have special-case code for actually seeing a watchtower though
        BUILDER => 5,
        // Another threat
        WATCHTOWER => 4,
        // We probably won't take out an Archon anytime soon with Soldiers, but doing damage on it is good
        // Really these last three are TBD though
        ARCHON => 3,
        MINER => 2,
        LABORATORY => 1,
    };

    if old == null { return true; }
    if priority(new.type) > priority(old.type) { return true; }
    if priority(new.type) < priority(old.type) { return false; }
    let dNew = damageDone(rc.getType(), rc.getLevel(), new);
    let dOld = damageDone(rc.getType(), rc.getLevel(), old);
    if dNew > dOld { return true; }
    if dNew < dOld { return false; }
    if new.health < old.health { return true; }
    if new.health > old.health { return false; }

    // Target the one closest to the Archon if there is one
    // if Mem::closestArchon != null && new.location.isWithinDistanceSquared(Mem::closestArchon, min(20, Mem::closestArchon.distanceSquaredTo(old.location))) {
    //     true
    // Otherwise just pick the closest one
    // } else if Mem::closestArchon == null {
    new.location.isWithinDistanceSquared(at, at.distanceSquaredTo(old.location)  - 1)
    // } else {
    //     false
    // }
}
fn locBetter(old: LocInfo, new: LocInfo): bool {
    if old == null {
        true
    // } else if old.rubble > new.rubble + 10 {
    //     true
    } else if new.rubble <= old.rubble + 20 {
        if  canAttack &&
            new.enemyDamage <= nearbyFriendlyDamage / 2 + selfDamage / (10 + new.rubble) && 
            new.bestEnemy != null && 
            new.bestEnemy.health <= selfHealth && 
            unitBetter(old.bestEnemy, new.bestEnemy)
            {
            true
        } else if canAttack &&
            old.enemyDamage <= nearbyFriendlyDamage / 2 + selfDamage / (10 + old.rubble) && 
            old.bestEnemy != null && 
            old.bestEnemy.health <= selfHealth && 
            unitBetter(new.bestEnemy, old.bestEnemy)
            {
                false
        } else if new.enemyDamage < old.enemyDamage {
            true
        } else if new.enemyDamage == old.enemyDamage {
            if selfHealth <= RETREAT_HEALTH && new.archonDist < old.archonDist {
                true
            } else if new.rubble < old.rubble && new.enemyDamage > 0 {
                true
            } else if new.rubble <= old.rubble + 10 {
                if canAttack && new.bestEnemy != null && unitBetter(old.bestEnemy, new.bestEnemy) {
                    true
                } else if !canAttack || old.bestEnemy == null || !unitBetter(new.bestEnemy, old.bestEnemy) {
                    if new.rubble < old.rubble {
                        true
                    } else if nearbyFriendlyHP >= nearbyEnemyHP {
                        new.distToEnemy < old.distToEnemy
                    } else {
                        new.distToEnemy > old.distToEnemy
                    }
                }
            } else {
                false
            }
        } else {
            false
        }
    } else {
        false
    }
}
fn inline updateLoc(loc: LocInfo, unit: RobotInfo) {
    if loc != null {
        let d = loc.loc.distanceSquaredTo(unit.location);
        if unit.type.damage > 0 && d <= unit.type.actionRadiusSquared {
            let rubble = rc.senseRubble(unit.location);
            loc.enemyDamage += (unit.type.getDamage(unit.level) * 1000 / unit.type.actionCooldown) / (10 + rubble);
        }
        if canAttack && d <= actionRadius {
            if unitBetter(loc.bestEnemy, unit) {
                loc.bestEnemy = unit;
                loc.distToEnemy = d;
            }
            if isSage {
                // TODO weight based on unit type and/or damage or something
                if unit.mode == RobotMode::TURRET {
                    let hp = unit.type.getMaxHealth(unit.level) / 10;
                    if hp > unit.health {
                        loc.furyHP += unit.health + KILL_VALUE;
                    } else {
                        loc.furyHP += hp;
                    }
                } else if unit.mode == RobotMode::DROID {
                    let hp = unit.type.getMaxHealth(unit.level) * 22 / 100;
                    if hp > unit.health {
                        loc.chargeHP += unit.health + KILL_VALUE;
                    } else {
                        loc.chargeHP += hp;
                    }
                }
            }
        }
    }
}

fn microTarget(add_soldiers: bool): RobotInfo throws GameActionException {
    at = rc.getLocation();
    let best: RobotInfo = null;
    for i in Mem::nearbyEnemies {
        if add_soldiers && i.type.damage > 0 {
            Mem::addSoldier(i.location);
        }
        if rc.canAttack(i.location) {
            if unitBetter(best, i) {
                best = i;
            }
        }
    }
    best
}

fn inline damageDone(ty: RobotType, lvl: i32, unit: RobotInfo): i32 {
    if unit != null {
        let hp = ty.getDamage(lvl);
        if hp > unit.health {
            unit.health + KILL_VALUE
        } else {
            hp
        }
    } else {
        0
    }
}

let cloc: LocInfo = null;
fn microLoc(ty: RobotType, lvl: i32, considerAttack: bool, health: i32, include_center: bool, add_soldiers: bool): LocInfo throws GameActionException {
    at = rc.getLocation();
    selfDamage = ty.getDamage(lvl) * 100;// 1000 / ty.actionCooldown;
    actionRadius = ty.actionRadiusSquared;
    selfHealth = health;
    canAttack = considerAttack;
    isSage = ty == RobotType::SAGE;

    let n: LocInfo = null;
    let locs: [LocInfo; 9] = [n,n,n,n,n,n,n,n,n];
    cloc = null;
    let directions = allDirections();
    for i in unroll 0..9 {
        let dir = directions[i];
        let l = at.add(dir);
        if (include_center && dir == Direction::CENTER) || (!rc.canSenseRobotAtLocation(l) && rc.onTheMap(l)) {
            locs[i] = LocInfo();
            locs[i].init(l);
            if dir == Direction::CENTER {
                cloc = locs[i];
            }
        }
    }
    nearbyEnemyHP = 0;
    for bot in Mem::nearbyEnemies {
        if rc.canSenseLocation(bot.location) {
            if add_soldiers && bot.type.damage > 0 {
                Mem::addSoldier(bot.location);
                nearbyEnemyHP += bot.health;
            }
            for loc in locs {
                updateLoc(loc, bot);
            }
        }
    }
    nearbyFriendlyHP = rc.getHealth();
    nearbyFriendlyDamage = 0;
    for i in Mem::nearbyAllies {
        if rc.canSenseLocation(i.location) {
            if i.type.damage > 0 {
                nearbyFriendlyHP += i.health;
                let rubble = rc.senseRubble(i.location);
                nearbyFriendlyDamage += (i.type.getDamage(i.level) * 1000 / i.type.actionCooldown) / (10 + rubble);
            }
        }
    }

    let best: LocInfo = cloc;
    for loc in locs {
        if loc != null {
            if locBetter(best, loc) {
                best = loc;
            }
        }
    }
    best
}

fn findSpawnSpace(ty: RobotType): Direction throws GameActionException {
    let best = microLoc(ty, 1, true, ty.health, false, false);

    if best != null {
        rc.setIndicatorString("SPAWN MICRO for " + ty + ": Damage: " + best.enemyDamage + ", rubble: " + best.rubble);
        at.dirTo(best.loc)
    } else {
        let n: Direction = null;
        n
    }
}

fn combatMicro() throws GameActionException {
    if rc.isMovementReady() {
        let canAttack = rc.getActionCooldownTurns() < 20;
        let best = microLoc(rc.getType(), rc.getLevel(), true, rc.getHealth(), true, true);
        rc.setIndicatorString("MOVE MICRO: Damage: " + best.enemyDamage + ", rubble: " + best.rubble);
        if best == null {
            println("ERROR! best should not be null, CENTER is always an option");
        }
        // We can attack before or after moving, do whichever one is better
        let bestNow = cloc.bestEnemy;
        let bestThen = best.bestEnemy;
        let shouldAttack = true;
        if isSage {
            let bestDamage = max(damageDone(rc.getType(), rc.getLevel(), bestNow), damageDone(rc.getType(), rc.getLevel(), bestThen));
            shouldAttack = bestDamage > max(best.furyHP, best.chargeHP);
        }
        if shouldAttack && bestNow != null && unitBetter(bestThen, bestNow) {
            if bestNow != null && rc.canAttack(bestNow.location) {
                rc.attack(bestNow.location);
            }
        }
        if best.loc != at {
            rc.move(at.dirTo(best.loc));
        }
        if shouldAttack && bestThen != null && rc.canAttack(bestThen.location) {
            rc.attack(bestThen.location);
        }
        if isSage && !shouldAttack && rc.isActionReady() {
            if best.furyHP > best.chargeHP {
                rc.envision(AnomalyType::FURY);
            } else {
                rc.envision(AnomalyType::CHARGE);
            }
        }
    } else if rc.isActionReady() {
        let best = microTarget(true);
        if best == null {
            rc.setIndicatorString("ATTACK MICRO: idle");
        } else {
            rc.setIndicatorString("ATTACK MICRO: attacking " + best.type);
            rc.setIndicatorLine(at, best.location, 255, 0, 0);
            rc.attack(best.location);
        }
    }
}