extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

// Cache these, 200 bytecode is better than splitting it manually but we definitely don't want to do it twice
let nearbyAllies: [RobotInfo] = [];
let nearbyEnemies: [RobotInfo] = [];
let enemyArchons: [MapLocation] = [];
let friendlyArchons: [MapLocation] = [];
let lastFriendlyArchons = 0;
let closestArchon: MapLocation = null;
let ownsQuadrant = false;
let buildInfo = BuildInfo();

// 0: archon idx finding
// 1-5: enemy archon list
// 6: soldier count
// 7-8: miner corner stuff
// 9: miner count
// 10-13: friendly archon locations
// 14,15-30: enemy soldier locations (the first one is the current index)
// 31: build information
// 32: income this turn (average income is computed by each archon)
// 33: lab check in / number of labs
// 34: builder count
// 35-36: archon build queue thing
// 37: alternate miner count
// 38: builders claim lab locations so only one is waiting
// 39: disposable income
// 40: number of unoccupied miners
define ARCHON_IDX_LOC = 0;
define ENEMY_ARCHON_LOC = 1;
define ENEMY_ARCHON_LEN = 6;
define SOLDIER_COUNT_LOC = 6;
define MINER_CORNER_LOC = 7;
define MINER_COUNT_LOC = 9;
let FRIENDLY_ARCHON_LOC = 10;
define FRIENDLY_ARCHON_LEN = 4;
// we need to use these in Miner and that happens to run first so we can't do this
// TODO fix this system or add proper constants or something
// define ENEMY_SOLDIER_LOC = 15;
// define ENEMY_SOLDIER_LEN = 16;
define BUILD_INFO_LOC = 31;
define INCOME_LOC = 32;
define LAB_COUNT_LOC = 33;
define BUILDER_COUNT_LOC = 34;
let BUILD_QUEUE_LOC = 35;
let LAB_CLAIM_LOC = 38;
let FREE_LEAD_LOC = 39;
let FREE_MINER_LOC = 40;

define ENEMY_SOLDIER_KEEP_TURNS = 5;

// A location takes up 12 bits
// ...this is a lot easier than last year
fn encodeLoc(loc: MapLocation): i32 = (loc.y << 6) | loc.x;
fn decodeLoc(x: i32): MapLocation = MapLocation(x & 0b111111, (x >> 6) & 0b111111);

// Run this once a turn, before doing other things.
// It caches nearby robots, communicates stuff it found, etc.
fn maintain() throws GameActionException {
    let loc = rc.getLocation();
    let visRadius = rc.getType().visionRadiusSquared;
    nearbyAllies = rc.senseNearbyRobotsT(visRadius, rc.getTeam());
    nearbyEnemies = rc.senseNearbyRobotsT(visRadius, rc.getTeam().opponent());

    if rc.getType() == RobotType::MINER {
        minerPassiveCornerSearch();
    }

    if lastFriendlyArchons != rc.getArchonCount() && (rc.getType() != RobotType::ARCHON || Archon::archonCount == rc.getArchonCount()) {
        lastFriendlyArchons = rc.getArchonCount();
        friendlyArchons.clear();
        for i in 0..rc.getArchonCount() {
            friendlyArchons.push(decodeLoc(rc.readSharedArray(FRIENDLY_ARCHON_LOC + i)));
        }
        rc.setIndicatorString("FOUND ARCHONS: " + friendlyArchons.len());
    }
    closestArchon = null;
    let closestArchonD = 10000;
    let ownsX = false;
    let ownsY = false;
    let w2 = RobotPlayer::rc.getMapWidth() / 2;
    let h2 = RobotPlayer::rc.getMapHeight() / 2;
    for i in friendlyArchons {
        let d = i.distanceSquaredTo(loc);
        if d < closestArchonD {
            closestArchon = i;
            closestArchonD = d;
        }
        if !ownsX && (loc.x <= w2 && i.x <= w2) || (loc.x >= w2 && i.x >= w2) {
            ownsX = true;
        }
        if !ownsY && (loc.y <= h2 && i.y <= h2) || (loc.y >= h2 && i.y >= h2) {
            ownsY = true;
        }
    }
    ownsQuadrant = ownsX && ownsY;

    readArchons();
    searchArchons();

    soldiersAdded = 0;
}

class BuildInfo {
    let shouldBuildWatchtower: bool;
    let shouldBuildLab: bool;
    let shouldUpgradeLab: bool;
    let shouldFarmLead: bool;
    let changed: bool;

    fn read() throws GameActionException {
        let a = rc.readSharedArray(BUILD_INFO_LOC);
        self.shouldBuildWatchtower = a & 0b10 != 0;
        self.shouldBuildLab = a & 1 != 0;
        self.shouldUpgradeLab = a & 0b100 != 0;
        self.shouldFarmLead = a & 0b1000 != 0;
    }

    fn writeBack() throws GameActionException {
        if self.changed {
            let a = 0;
            if self.shouldBuildLab {
                a |= 1;
            }
            if self.shouldBuildWatchtower {
                a |= 0b10;
            }
            if self.shouldUpgradeLab {
                a |= 0b100;
            }
            if self.shouldFarmLead {
                a |= 0b1000;
            }
            rc.writeSharedArray(BUILD_INFO_LOC, a);
        }
    }

    fn queueLabUpgrade() {
        if !self.shouldUpgradeLab {
            self.shouldUpgradeLab = true;
            self.changed = true;
        }
    }

    fn queueLab() {
        if !self.shouldBuildLab {
            self.shouldBuildLab = true;
            self.changed = true;
        }
    }

    fn queueWatchtower() {
        if !self.shouldBuildWatchtower {
            self.shouldBuildWatchtower = true;
            self.changed = true;
        }
    }

    fn queueLeadFarming() {
        if !self.shouldFarmLead {
            self.shouldFarmLead = true;
            self.changed = true;
        }
    }

    fn farmedLead() {
        if self.shouldFarmLead {
            self.shouldFarmLead = false;
            self.changed = true;
        }
    }

    fn upgradedLab() {
        if self.shouldUpgradeLab {
            self.shouldUpgradeLab = false;
            self.changed = true;
        }
    }


    fn builtLab() {
        if self.shouldBuildLab {
            self.shouldBuildLab = false;
            self.changed = true;
        }
    }
    
    fn builtWatchtower() {
        if self.shouldBuildWatchtower {
            self.shouldBuildWatchtower = false;
            self.changed = true;
        }
    }
}

let lastLead = 0;
let lastIncome = 0;
fn resetIncome() throws GameActionException {
    // When we spend money, we subtract that amount from the stored income
    // Then this sees it and adjusts lastLead accordingly
    let reportedIncome = rc.readSharedArray(INCOME_LOC);
    // The positive amount of lead spent last turn
    let spent = lastIncome - reportedIncome;
    lastLead -= spent;

    let curLead = rc.getTeamLeadAmount(rc.getTeam());
    let income = curLead - lastLead;
    lastLead = curLead;
    // this can happen when the first archon dies and it doesn't get reset correctly
    if income < 0 {
        income = 0;
    }
    lastIncome = income;
    rc.writeSharedArray(INCOME_LOC, income);
}
fn readIncome(): i32 throws GameActionException {
    rc.readSharedArray(INCOME_LOC)
}
fn spend(lead: i32) throws GameActionException {
    let old = rc.readSharedArray(INCOME_LOC);
    if old < lead {
        lead = old;
    }
    rc.writeSharedArray(INCOME_LOC, old - lead);
}

let enemySoldiers: [MapLocation] = [];
fn getSoldiers(): [MapLocation] throws GameActionException {
    enemySoldiers.clear();
    for i in unroll ENEMY_SOLDIER_LOC..ENEMY_SOLDIER_LOC+ENEMY_SOLDIER_LEN {
        let r = rc.readSharedArray(i);
        if r != 0 {
            enemySoldiers.push(decodeLoc(r - 1));
        }
    }
    enemySoldiers
}
fn getClosestSoldier(ref: MapLocation): MapLocation throws GameActionException {
    let bestD = 100000;
    let best: MapLocation = null;
    for i in unroll ENEMY_SOLDIER_LOC..ENEMY_SOLDIER_LOC+ENEMY_SOLDIER_LEN {
        let r = rc.readSharedArray(i);
        if r != 0 {
            let loc = decodeLoc(r - 1);
            let d = ref.distanceSquaredTo(loc);
            if d < bestD {
                bestD = d;
                best = loc;
            }
        }
    }
    best
}
let soldiersAdded = 0;
fn addSoldier(loc: MapLocation) throws GameActionException {
    // Don't add too many soldiers in one turn, since adding each one costs 200 bytecode
    // 5 soldiers is 1000 bytecode
    let soldierLimit = if rc.getType() == RobotType::MINER { 2 } else { 5 };
    if soldiersAdded < soldierLimit {
        soldiersAdded += 1;
        let idx = rc.readSharedArray(ENEMY_SOLDIER_LOC - 1);
        let nidx = (idx + 1) % ENEMY_SOLDIER_LEN;
        rc.writeSharedArray(ENEMY_SOLDIER_LOC + idx, encodeLoc(loc) + 1);
        rc.writeSharedArray(ENEMY_SOLDIER_LOC - 1, nidx);
    }
}
let oldIdxs: [i32; ENEMY_SOLDIER_KEEP_TURNS];
fn maintainSoldiers() throws GameActionException {
    fn inline cycleIdxs(idx: i32): i32 {
        let t = oldIdxs[0];
        for i in unroll 1..oldIdxs.len() {
            oldIdxs[i - 1] = oldIdxs[i];
        }
        oldIdxs[oldIdxs.len() - 1] = idx;
        t
    }

    let idx = rc.readSharedArray(ENEMY_SOLDIER_LOC - 1);
    let oldIdx = cycleIdxs(idx);

    // Remove everything behind oldIdx, assuming we didn't get more than ENEMY_SOLDIER_LEN soldiers in between
    // ...which *probably* shouldn't happen much?

    // TODO can we `break` anywhere in these loops?

    // [...oldIdx...idx....]
    //  ---            ---- remove
    // or
    // [....oldIdx=idx.....]
    //  ----          ----- remove everything b/c we haven't added any new soldiers recently
    if oldIdx <= idx {
        for i in 0..oldIdx {
            if rc.readSharedArray(ENEMY_SOLDIER_LOC + i) != 0 {
                rc.writeSharedArray(ENEMY_SOLDIER_LOC + i, 0);
            }
        }
        for i in idx..ENEMY_SOLDIER_LEN {
            if rc.readSharedArray(ENEMY_SOLDIER_LOC + i) != 0 {
                rc.writeSharedArray(ENEMY_SOLDIER_LOC + i, 0);
            }
        }
    // [...idx...oldIdx....]
    //        --- remove
    } else {
        for i in idx..oldIdx {
            if rc.readSharedArray(ENEMY_SOLDIER_LOC + i) != 0 {
                rc.writeSharedArray(ENEMY_SOLDIER_LOC + i, 0);
            }
        }
    // they're equal, so we haven't seen any soldiers since
    // so clear everything
    }
}

fn registerArchon(index: i32, loc: MapLocation) throws GameActionException {
    rc.writeSharedArray(FRIENDLY_ARCHON_LOC + index, encodeLoc(loc));
}

// Miner corners structure:
// four corners, 8 bits each
// 6-bit distance to location, 1-bit ping, 1-bit has been found
let lastCheckIn: [i32; 4];
fn maintainMinerCorners() throws GameActionException {
    fn inline doCorner(info: i32, i: i32): i32 {
        if info == 0 || info & 1 != 0 {
            // nobody is going for it
            info
        } else if info & 0b10 == 0 {
            // someone is going for it and hasn't checked in yet
            // if it's been more than 2 turns, mark the corner as not having been found
            if lastCheckIn[i] <= rc.getRoundNum() - 2 {
                0
            } else {
                info
            }
        } else {
            // someone is going for it and they checked in
            lastCheckIn[i] = rc.getRoundNum();
            // so reset the ping
            info ^ 0b10
        }
    }

    let a = rc.readSharedArray(MINER_CORNER_LOC);
    let b = rc.readSharedArray(MINER_CORNER_LOC + 1);
    let a2 = doCorner(a & 0b111111, 0) | (doCorner(a >> 8, 1) << 8);
    let b2 = doCorner(b & 0b111111, 2) | (doCorner(b >> 8, 3) << 8);
    if a != a2 {
        rc.writeSharedArray(MINER_CORNER_LOC, a2);
    }
    if b != b2 {
        rc.writeSharedArray(MINER_CORNER_LOC + 1, b2);
    }
}
let cornerLocs: [MapLocation] = [];
let hadCorner: [bool] = [; 4];
fn minerPingCorner(i: i32): bool throws GameActionException {
    if rc.canSenseLocation(cornerLocs[i]) {
        hadCorner[i] = true;
        return false;
    }
    let idx = MINER_CORNER_LOC + i / 2;
    let a = rc.readSharedArray(idx);
    if a & (1 << (8 * (i % 2))) != 0 {
        false
    } else {
        a |= (0b10 << 8 * (i % 2));
        rc.writeSharedArray(idx, a);
        true
    }
}
fn minerClaimCorner(): i32 throws GameActionException {
    fn inline tryCorner(i: i32): bool {
        if hadCorner[i] {
            false
        } else {
            let idx = MINER_CORNER_LOC + i / 2;
            let a = rc.readSharedArray(idx);
            let b = if i % 2 == 0 {
                a & 0b111111
            } else {
                a >> 8
            };
            if b  == 0 {
                let loc = cornerLocs[i];
                let at = rc.getLocation();
                // if abs(loc.x - at.x) <= rc.getMapWidth() / 2 && abs(loc.y - at.y) <= rc.getMapHeight() / 2 {
                let d = max(abs(loc.x - at.x), abs(loc.y - at.y));
                a |= ((d << 2) | 0b10) << (8 * (i % 2));
                rc.writeSharedArray(idx, a);
                true
                // } else {
                //     false
                // }
            } else {
                false
            }
        }
    }

    for i in unroll 0..4 {
        if tryCorner(i) {
            return i;
        }
    }

    -1
}
fn minerPassiveCornerSearch() throws GameActionException {
    if cornerLocs.len() == 0 {
        cornerLocs.push(MapLocation(0, 0));
        cornerLocs.push(MapLocation(0, rc.getMapHeight() - 1));
        cornerLocs.push(MapLocation(rc.getMapWidth() - 1, 0));
        cornerLocs.push(MapLocation(rc.getMapWidth() - 1, rc.getMapHeight() - 1));
    }
    for i in unroll 0..4 {
        if rc.canSenseLocation(cornerLocs[i]) {
            let idx = MINER_CORNER_LOC + i / 2;
            let a = rc.readSharedArray(idx);
            let bit = (1 << 8 * (i % 2));
            if a & bit == 0 {
                a |= bit;
                rc.writeSharedArray(idx, a);
            }
        }
    }
}

fn getFreeMiners(): i32 throws GameActionException {
    rc.readSharedArray(FREE_MINER_LOC)
}
fn clearFreeMiners() throws GameActionException {
    rc.writeSharedArray(FREE_MINER_LOC, 0);
}
fn addFreeMiners() throws GameActionException {
    rc.writeSharedArray(FREE_MINER_LOC, rc.readSharedArray(FREE_MINER_LOC) + 1);
}

fn getMinerCount(): i32 throws GameActionException {
    rc.readSharedArray(MINER_COUNT_LOC)
}
fn clearMinerCount() throws GameActionException {
    rc.writeSharedArray(MINER_COUNT_LOC, 0);
}
fn addMinerCount() throws GameActionException {
    rc.writeSharedArray(MINER_COUNT_LOC, rc.readSharedArray(MINER_COUNT_LOC) + 1);
}

fn getSoldierCount(): i32 throws GameActionException {
    rc.readSharedArray(SOLDIER_COUNT_LOC)
}
fn clearSoldierCount() throws GameActionException {
    rc.writeSharedArray(SOLDIER_COUNT_LOC, 0);
}
fn addSoldierCount() throws GameActionException {
    rc.writeSharedArray(SOLDIER_COUNT_LOC, rc.readSharedArray(SOLDIER_COUNT_LOC) + 1);
}

fn getLabCount(): i32 throws GameActionException {
    rc.readSharedArray(LAB_COUNT_LOC)
}
fn clearLabCount() throws GameActionException {
    rc.writeSharedArray(LAB_COUNT_LOC, 0);
}
fn addLabCount() throws GameActionException {
    rc.writeSharedArray(LAB_COUNT_LOC, rc.readSharedArray(LAB_COUNT_LOC) + 1);
}

fn getBuilderCount(): i32 throws GameActionException {
    rc.readSharedArray(BUILDER_COUNT_LOC)
}
fn clearBuilderCount() throws GameActionException {
    rc.writeSharedArray(BUILDER_COUNT_LOC, 0);
}
fn addBuilderCount() throws GameActionException {
    rc.writeSharedArray(BUILDER_COUNT_LOC, rc.readSharedArray(BUILDER_COUNT_LOC) + 1);
}

fn readArchons() throws GameActionException {
    let a = rc.readSharedArray(ENEMY_ARCHON_LOC);
    // 4-bit number of enemy archons we know of
    let numArchons = a >> 12;
    if numArchons != enemyArchons.len() {
        enemyArchons.clear();
        for i in 0..numArchons {
            let n = rc.readSharedArray(ENEMY_ARCHON_LOC + i);
            enemyArchons.push(decodeLoc(n));
        }
    }
}
fn pushArchon(loc: MapLocation) throws GameActionException {
    if enemyArchons.len() >= ENEMY_ARCHON_LEN {
        return;
    }

    rc.setIndicatorLine(rc.getLocation(), loc, 255, 0, 0);

    enemyArchons.push(loc);
    let a = rc.readSharedArray(ENEMY_ARCHON_LOC);
    let oldNum = a >> 12;
    // Don't incur the 100 btc cost twice unless we need to
    if oldNum == 0 {
        let a = ((oldNum + 1) << 12) | encodeLoc(loc);
        rc.writeSharedArray(ENEMY_ARCHON_LOC, a);
    } else {
        // Just do the addition on the high bits directly
        a += 1 << 12;
        rc.writeSharedArray(ENEMY_ARCHON_LOC, a);
        rc.writeSharedArray(ENEMY_ARCHON_LOC + oldNum, encodeLoc(loc));
    }
}
fn removeArchon(i: i32) throws GameActionException {
    rc.setIndicatorLine(rc.getLocation(), enemyArchons[i], 127, 0, 127);

    // Easy case
    if enemyArchons.len() == 1 {
        let _ = enemyArchons.pop();
        rc.writeSharedArray(ENEMY_ARCHON_LOC, 0);
        return;
    }

    // Swap the removed element with the last element so only touch those two
    // (and we don't even have to touch the last element in the shared array)
    let last_loc = enemyArchons.pop();
    if i != enemyArchons.len() {
        enemyArchons[i] = last_loc;
    }
    if i == 0 {
        rc.writeSharedArray(ENEMY_ARCHON_LOC, (enemyArchons.len() << 12) | encodeLoc(last_loc));
    } else {
        let a = rc.readSharedArray(ENEMY_ARCHON_LOC);
        a -= 1 << 12;
        rc.writeSharedArray(ENEMY_ARCHON_LOC, a);
        rc.writeSharedArray(ENEMY_ARCHON_LOC + i, encodeLoc(last_loc));
    }
}
fn searchArchons() throws GameActionException {
    fn seenArchon(loc: MapLocation): bool {
        for i in enemyArchons {
            if i == loc {
                return true;
            }
        }
        false
    }

    // Find new archons
    for i in nearbyEnemies {
        if i.type == RobotType::ARCHON && i.mode == RobotMode::TURRET && !seenArchon(i.location) {
            pushArchon(i.location);
        }
    }
    // Remove ones that no longer exist
    let remove: [i32] = [];
    for i in 0..enemyArchons.len() {
        if enemyArchons[i].isWithinDistanceSquared(rc.getLocation(), rc.getType().visionRadiusSquared) {
            let r = rc.senseRobotAtLocation(enemyArchons[i]);
            if r == null || r.type != RobotType::ARCHON {
                remove.push(i);
            }
        }
    }
    for i in remove {
        removeArchon(i);
    }
}