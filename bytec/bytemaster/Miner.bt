extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;
use Micro::Comparison;

// Copied from Mem since we want to inline them
define ENEMY_SOLDIER_LOC = 15;
define ENEMY_SOLDIER_LEN = 16;
define MOST_LEAD = true;
let micro = Micro::Micro().init([
    Comparison::EnemyDamage,
    Comparison::AdjacentLead,
    Comparison::Rubble(20),
    Comparison::LeadDist,
    Comparison::Rubble(0),
]);

let closestLead: MapLocation = null;
let closestM = 0;

fn preTurn() throws GameActionException {
    // Make sure to mine before we do anything else, in case maintain() and micro goes over on bytecode
    Mem::addMinerCount();
    if isFree {
        Mem::addFreeMiners();
    }
    tryMine();
}

let isFree = true;
let currentCorner = -1;
fn turn() throws GameActionException {
    Mem::minerPassiveCornerSearch();
    if currentCorner != -1 {
        if !Mem::minerPingCorner(currentCorner) {
            currentCorner = -1;
        }
    }
    if rc.isMovementReady() {
        if !microMove() {
            if closestLead != null {
                // If micro didn't move to the adjacent location, it was for a reason
                if closestLead.isWithinDistanceSquared(rc.getLocation(), 8) && rc.canMove(rc.getLocation().dirTo(closestLead)) {
                    return;
                }
                let bestLoc: MapLocation = closestLead;
                let bestPass = 100000;
                for i in ALL_MOVE_DIRECTIONS {
                    let l = closestLead.add(i);
                    if !rc.canSenseRobotAtLocation(l) && rc.canSenseLocation(l) {
                        let pass = rc.senseLead(l);
                        if pass < bestPass {
                            bestPass = pass;
                            bestLoc = l;
                        }
                    }
                }
                isFree = false;
                Paths::target = bestLoc;
                Paths::targetMove(false);
            } else if currentCorner != -1 {
                isFree = false;
                Paths::target = Mem::cornerLocs[currentCorner];
                Paths::targetMove(true);
            } else if rc.getID() % 3 == 0 || rc.getRoundNum() < 100 {
                currentCorner = Mem::minerClaimCorner();
                if currentCorner != -1 {
                    isFree = false;
                    Paths::target = Mem::cornerLocs[currentCorner];
                    Paths::targetMove(true);
                } else {
                    isFree = true;
                    Paths::targetMove(true);
                }
            } else if rc.getID() % 3 == 1 && rc.getRoundNum() > 100 && Mem::closestArchon != null && !rc.canSenseLocation(Mem::closestArchon) && rc.getRoundNum() > 100 {
                isFree = false;
                Paths::target = Mem::closestArchon;
                Paths::targetMove(true);
            } else {
                isFree = true;
                Paths::targetMove(true);
            }
        }
    } else {
        // microMove() didn't report the soldiers, so do that here
        for i in Mem::nearbyEnemies {
            if i.type.damage > 0 {
                Mem::addSoldier(i.location);
            }
        }
    }
    tryMine();
}

fn findSpawnSpace(): Direction throws GameActionException {
    micro.startSpawn(RobotType::MINER);
    micro.updateEnemies();
    micro.updateLead();
    let best = micro.bestLoc();

    if best != null {
        rc.getLocation().dirTo(best.loc)
    } else {
        let n: Direction = null;
        n
    }
}

fn microMove(): bool throws GameActionException {
    micro.startRc(true);
    micro.updateEnemies();
    micro.updateLead();
    let best = micro.bestLoc();
    let at = rc.getLocation();

    if best != null && (micro.cloc.enemyDamage > 0 || best.adjacentLead > 0) {
        if best.loc != at {
            // rc.setIndicatorString("MICRO MOVE: damage: " + best.enemyDamage + ", lead: " + best.adjacentLead);
            rc.setIndicatorLine(at, best.loc, 0, 0, 255);
            rc.move(at.dirTo(best.loc));
        } else {
            // rc.setIndicatorString("MICRO STAY: damage: " + best.enemyDamage + ", lead: " + best.adjacentLead);
        }
        true
    } else {
        // rc.setIndicatorString("NO MICRO: damage: " + best.enemyDamage + ", lead: " + best.adjacentLead);
        false
    }
}

fn shouldOffensiveMine(): bool throws GameActionException {
    if Mem::closestArchon == null {
        return false;
    }
    let at = rc.getLocation();
    let friendlyDist = Mem::closestArchon.distanceSquaredTo(at);
    let enemyDist = 10000;
    for i in Mem::enemyArchons {
        let d = i.distanceSquaredTo(at);
        if d < enemyDist {
            enemyDist = d;
        }
    }
    if enemyDist == 10000 {
        !Mem::ownsQuadrant && Mem::nearbyEnemies.len() > Mem::nearbyAllies.len()
    } else {
        enemyDist < friendlyDist && Mem::nearbyEnemies.len() >= Mem::nearbyAllies.len()
    }
}

// Returns an adjacent location that we can continue mining
fn tryMine() throws GameActionException {
    let at = rc.getLocation();
    let offensiveMining = shouldOffensiveMine();
    // rc.setIndicatorString("Offensive? " + offensiveMining);
    for dir in allDirections() {
        let loc = at.add(dir);
        while rc.canMineGold(loc) {
            rc.mineGold(loc);
        }
    }
    for dir in allDirections() {
        let loc = at.add(dir);
        // Leave 1 so it regenerates
        while rc.canMineLead(loc) && (offensiveMining || rc.senseLead(loc) > 1) {
            rc.mineLead(loc);
        }
    }
}