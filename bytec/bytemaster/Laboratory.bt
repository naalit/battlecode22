extern {
    import battlecode.common.*;
}

use Common::*;
use RobotPlayer::rc;

fn preTurn() throws GameActionException {

}

let incomes: [i32] = [; 10];
let incomeIdx = 0;
fn averageIncome(): i32 throws GameActionException {
    let income = Mem::readIncome();
    incomes[incomeIdx] = income;
    incomeIdx = (incomeIdx + 1) % incomes.len();
    let sum = 0;
    for i in incomes {
        sum += i;
    }
    rc.setIndicatorString("Income this turn: " + income + ", average income: " + sum / incomes.len());
    sum / incomes.len()
}

fn turn() throws GameActionException {
    if rc.getMode() == RobotMode::PORTABLE {
        let loc = rc.getLocation();
        let closestSoldier: RobotInfo = null;
        let closestD = 100000;
        for i in Mem::nearbyEnemies {
            if i.type.damage > 0 && i.mode.canAct {
                let d = i.location.distanceSquaredTo(loc);
                if d < closestD {
                    closestD = d;
                    closestSoldier = i;
                }
            }
        }

        if closestSoldier != null {
            Paths::target = loc.translate(loc.x-closestSoldier.location.x, loc.y-closestSoldier.location.y);
            Paths::targetMove(false);
        } else if Mem::nearbyAllies.len() < 10 {
            if Paths::archonMove() && rc.canTransform() {
                rc.transform();
            }
        } else {
            Paths::targetMove(true);
        }
    }

    Mem::addLabCount();
    let income = averageIncome();
    let freeLead = rc.readSharedArray(Mem::FREE_LEAD_LOC);

    // backup for pillars-like maps where the terrain switches
    // we'll probably still lose since we don't anticipate it, but if the other team doesn't either it might be helpful
    if (rc.senseRubble(rc.getLocation()) > 10 || Mem::nearbyAllies.len() >= 10) && (Mem::getLabCount() > 1 || rc.senseRubble(rc.getLocation()) >= 40) && rc.canTransform() {
        rc.transform();
    }

    if rc.canTransmute() && rc.getTransmutationRate() <= 7 && (rc.getTransmutationRate() <= freeLead || Mem::getLabCount() == 1) {
        rc.transmute();
        Mem::spend(rc.getTransmutationRate());
        rc.writeSharedArray(Mem::FREE_LEAD_LOC, max(0, freeLead - rc.getTransmutationRate()));
    }

    if rc.getTransmutationRate() > 3 && rc.getTransmutationRate() < 12 {
        Mem::buildInfo.read();
        Mem::buildInfo.queueLabUpgrade();
        Mem::buildInfo.writeBack();
    }
}